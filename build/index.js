var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// node_modules/@remix-run/dev/compiler/shims/react.ts
var React;
var init_react = __esm({
  "node_modules/@remix-run/dev/compiler/shims/react.ts"() {
    React = __toESM(require("react"));
  }
});

// node_modules/remix/index.js
var require_remix = __commonJS({
  "node_modules/remix/index.js"(exports) {
    "use strict";
    init_react();
    Object.defineProperty(exports, "__esModule", { value: true });
    var node = require("@remix-run/node");
    Object.defineProperty(exports, "createFileSessionStorage", {
      enumerable: true,
      get: function() {
        return node.createFileSessionStorage;
      }
    });
    Object.defineProperty(exports, "unstable_createFileUploadHandler", {
      enumerable: true,
      get: function() {
        return node.unstable_createFileUploadHandler;
      }
    });
    Object.defineProperty(exports, "unstable_createMemoryUploadHandler", {
      enumerable: true,
      get: function() {
        return node.unstable_createMemoryUploadHandler;
      }
    });
    Object.defineProperty(exports, "unstable_parseMultipartFormData", {
      enumerable: true,
      get: function() {
        return node.unstable_parseMultipartFormData;
      }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = require("@remix-run/server-runtime");
    Object.defineProperty(exports, "createCookie", {
      enumerable: true,
      get: function() {
        return serverRuntime.createCookie;
      }
    });
    Object.defineProperty(exports, "createCookieSessionStorage", {
      enumerable: true,
      get: function() {
        return serverRuntime.createCookieSessionStorage;
      }
    });
    Object.defineProperty(exports, "createMemorySessionStorage", {
      enumerable: true,
      get: function() {
        return serverRuntime.createMemorySessionStorage;
      }
    });
    Object.defineProperty(exports, "createSession", {
      enumerable: true,
      get: function() {
        return serverRuntime.createSession;
      }
    });
    Object.defineProperty(exports, "createSessionStorage", {
      enumerable: true,
      get: function() {
        return serverRuntime.createSessionStorage;
      }
    });
    Object.defineProperty(exports, "isCookie", {
      enumerable: true,
      get: function() {
        return serverRuntime.isCookie;
      }
    });
    Object.defineProperty(exports, "isSession", {
      enumerable: true,
      get: function() {
        return serverRuntime.isSession;
      }
    });
    Object.defineProperty(exports, "json", {
      enumerable: true,
      get: function() {
        return serverRuntime.json;
      }
    });
    Object.defineProperty(exports, "redirect", {
      enumerable: true,
      get: function() {
        return serverRuntime.redirect;
      }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    var react = require("@remix-run/react");
    Object.defineProperty(exports, "Form", {
      enumerable: true,
      get: function() {
        return react.Form;
      }
    });
    Object.defineProperty(exports, "Link", {
      enumerable: true,
      get: function() {
        return react.Link;
      }
    });
    Object.defineProperty(exports, "Links", {
      enumerable: true,
      get: function() {
        return react.Links;
      }
    });
    Object.defineProperty(exports, "LiveReload", {
      enumerable: true,
      get: function() {
        return react.LiveReload;
      }
    });
    Object.defineProperty(exports, "Meta", {
      enumerable: true,
      get: function() {
        return react.Meta;
      }
    });
    Object.defineProperty(exports, "NavLink", {
      enumerable: true,
      get: function() {
        return react.NavLink;
      }
    });
    Object.defineProperty(exports, "Outlet", {
      enumerable: true,
      get: function() {
        return react.Outlet;
      }
    });
    Object.defineProperty(exports, "PrefetchPageLinks", {
      enumerable: true,
      get: function() {
        return react.PrefetchPageLinks;
      }
    });
    Object.defineProperty(exports, "RemixBrowser", {
      enumerable: true,
      get: function() {
        return react.RemixBrowser;
      }
    });
    Object.defineProperty(exports, "RemixServer", {
      enumerable: true,
      get: function() {
        return react.RemixServer;
      }
    });
    Object.defineProperty(exports, "Scripts", {
      enumerable: true,
      get: function() {
        return react.Scripts;
      }
    });
    Object.defineProperty(exports, "ScrollRestoration", {
      enumerable: true,
      get: function() {
        return react.ScrollRestoration;
      }
    });
    Object.defineProperty(exports, "useActionData", {
      enumerable: true,
      get: function() {
        return react.useActionData;
      }
    });
    Object.defineProperty(exports, "useBeforeUnload", {
      enumerable: true,
      get: function() {
        return react.useBeforeUnload;
      }
    });
    Object.defineProperty(exports, "useCatch", {
      enumerable: true,
      get: function() {
        return react.useCatch;
      }
    });
    Object.defineProperty(exports, "useFetcher", {
      enumerable: true,
      get: function() {
        return react.useFetcher;
      }
    });
    Object.defineProperty(exports, "useFetchers", {
      enumerable: true,
      get: function() {
        return react.useFetchers;
      }
    });
    Object.defineProperty(exports, "useFormAction", {
      enumerable: true,
      get: function() {
        return react.useFormAction;
      }
    });
    Object.defineProperty(exports, "useHref", {
      enumerable: true,
      get: function() {
        return react.useHref;
      }
    });
    Object.defineProperty(exports, "useLoaderData", {
      enumerable: true,
      get: function() {
        return react.useLoaderData;
      }
    });
    Object.defineProperty(exports, "useLocation", {
      enumerable: true,
      get: function() {
        return react.useLocation;
      }
    });
    Object.defineProperty(exports, "useMatches", {
      enumerable: true,
      get: function() {
        return react.useMatches;
      }
    });
    Object.defineProperty(exports, "useNavigate", {
      enumerable: true,
      get: function() {
        return react.useNavigate;
      }
    });
    Object.defineProperty(exports, "useNavigationType", {
      enumerable: true,
      get: function() {
        return react.useNavigationType;
      }
    });
    Object.defineProperty(exports, "useOutlet", {
      enumerable: true,
      get: function() {
        return react.useOutlet;
      }
    });
    Object.defineProperty(exports, "useOutletContext", {
      enumerable: true,
      get: function() {
        return react.useOutletContext;
      }
    });
    Object.defineProperty(exports, "useParams", {
      enumerable: true,
      get: function() {
        return react.useParams;
      }
    });
    Object.defineProperty(exports, "useResolvedPath", {
      enumerable: true,
      get: function() {
        return react.useResolvedPath;
      }
    });
    Object.defineProperty(exports, "useSearchParams", {
      enumerable: true,
      get: function() {
        return react.useSearchParams;
      }
    });
    Object.defineProperty(exports, "useSubmit", {
      enumerable: true,
      get: function() {
        return react.useSubmit;
      }
    });
    Object.defineProperty(exports, "useTransition", {
      enumerable: true,
      get: function() {
        return react.useTransition;
      }
    });
  }
});

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  entry: () => entry,
  routes: () => routes
});
init_react();

// server-entry-module:@remix-run/dev/server-build
init_react();

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});
init_react();
var import_server = require("react-dom/server");
var import_remix = __toESM(require_remix());
var dotenv = require("dotenv");
dotenv.config();
function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  const markup = (0, import_server.renderToString)(/* @__PURE__ */ React.createElement(import_remix.RemixServer, {
    context: remixContext,
    url: request.url
  }));
  responseHeaders.set("Content-Type", "text/html");
  return new Response("<!DOCTYPE html>" + markup, {
    status: responseStatusCode,
    headers: responseHeaders
  });
}

// route:/home/aleksep/remix/donat/app/root.tsx
var root_exports = {};
__export(root_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => App,
  links: () => links,
  loader: () => loader,
  meta: () => meta
});
init_react();
var import_remix3 = __toESM(require_remix());

// app/styles/tailwind.css
var tailwind_default = "/build/_assets/tailwind-RJFEJ6KD.css";

// app/components/basket/index.tsx
init_react();
var import_react = __toESM(require("react"));

// app/components/basket/cache.tsx
init_react();
var cacheKey = "app-basket";
async function retrieveFromCache() {
  try {
    const cache = await localStorage.getItem(cacheKey);
    if (cache) {
      return JSON.parse(cache);
    }
  } catch (error) {
  }
  return {};
}
function persistToCache(data) {
  try {
    return localStorage.setItem(cacheKey, JSON.stringify(data));
  } catch (error) {
  }
}

// app/components/basket/reducer.ts
init_react();
var import_immer = __toESM(require("immer"));
var initialState = {
  status: "not-hydrated",
  clientBasket: {
    cart: [],
    voucherCode: null,
    crystallizeOrderId: null,
    klarnaOrderId: null
  },
  serverBasket: null,
  attentionCartItem: {}
};
var reducer_default = (0, import_immer.default)(function reducer(draft, _a) {
  var _b = _a, { action } = _b, rest = __objRest(_b, ["action"]);
  draft.changeTriggeredByOtherTab = false;
  switch (action) {
    case "hydrate": {
      if (draft.status === "not-hydrated") {
        if (rest.cart) {
          draft.clientBasket = rest || initialState.clientBasket;
          if (!draft.clientBasket.cart) {
            draft.clientBasket.cart = initialState.clientBasket.cart;
          }
        }
        draft.status = "server-basket-is-stale";
      }
      break;
    }
    case "channel-update": {
      draft.clientBasket = rest.clientBasket;
      draft.serverBasket = rest.serverBasket;
      draft.changeTriggeredByOtherTab = true;
      draft.status = "ready";
      break;
    }
    case "set-crystallize-order-id": {
      draft.clientBasket.crystallizeOrderId = rest.crystallizeOrderId;
      break;
    }
    case "set-klarna-order-id": {
      draft.clientBasket.klarnaOrderId = rest.klarnaOrderId;
      break;
    }
    case "server-update-failed": {
      draft.status = "server-update-failed";
      break;
    }
    case "retry-server-update": {
      draft.status = "server-basket-is-stale";
      break;
    }
    case "empty": {
      draft.clientBasket = initialState.clientBasket;
      draft.status = "server-basket-is-stale";
      break;
    }
    case "add-item":
    case "remove-item":
    case "increment-item":
    case "decrement-item": {
      const { id, sku, path, priceVariantIdentifier = "default", stock } = rest;
      if (!sku || !path) {
        throw new Error(`Please provide "sku" and "path" for ${action}`);
      }
      const itemIndex = draft.clientBasket.cart.findIndex((i) => i.sku === sku);
      if (itemIndex !== -1) {
        if (action === "remove-item") {
          draft.clientBasket.cart.splice(itemIndex, 1);
        } else {
          const item = draft.clientBasket.cart[itemIndex];
          if (action === "decrement-item") {
            item.quantity -= 1;
          } else {
            item.quantity += 1;
          }
        }
      } else {
        if (!["remove-item", "decrement-item"].includes(action)) {
          draft.clientBasket.cart.push({
            id,
            sku,
            path,
            priceVariantIdentifier,
            quantity: 1,
            stock
          });
        }
      }
      draft.status = "server-basket-is-stale";
      break;
    }
    case "set-server-basket": {
      draft.serverBasket = rest.serverBasket;
      draft.status = "ready";
      if (window.ENV.NEXT_PUBLIC_CRYSTALLIZE_TENANT_IDENTIFIER !== "furniture" && window.ENV.SERVICE_API_URL === "https://remix-service-api.vercel.app/api/graphql") {
        draft.clientBasket.cart = draft.serverBasket.cart.map(({ id, sku, path, quantity, stock }) => ({
          id,
          sku,
          path,
          quantity,
          priceVariantIdentifier: "default",
          stock
        }));
      }
      break;
    }
    case "draw-attention": {
      draft.attentionCartItem = {
        time: Date.now(),
        sku: rest.sku
      };
      break;
    }
    case "add-voucher": {
      draft.clientBasket.voucherCode = rest.voucherCode;
      draft.status = "server-basket-is-stale";
      break;
    }
    case "remove-voucher": {
      draft.clientBasket.voucherCode = initialState.clientBasket.voucherCode;
      draft.status = "server-basket-is-stale";
      break;
    }
    default: {
      throw new Error(`Action ${action} not supported`);
    }
  }
  if (draft.clientBasket.cart.length > 0) {
    draft.clientBasket.cart = draft.clientBasket.cart.filter(function validateCartItem({ path, sku }) {
      return path && sku;
    });
  }
  draft.totalQuantity = draft.clientBasket.cart.reduce((acc, c) => acc + c.quantity, 0);
});

// app/components/basket/shared-channel.ts
init_react();
var channel;
if (typeof window !== "undefined" && "BroadcastChannel" in window) {
  channel = new BroadcastChannel("app_basket");
}
function getChannel() {
  return channel;
}

// app/components/basket/get-basket-query.ts
init_react();
var GET_BASKET_QUERY = `
  query getServerBasket($basketModel: BasketModelInput!) {
    basket(basketModel: $basketModel) {
      total {
        gross
        net
        tax {
          name
          percent
        }
        currency
        discount
      }
      cart {
        sku
        name
        path
        quantity
        attributes {
          attribute
          value
        }
        price {
          gross
          currency
        }
        images {
          url
          variants {
            url
            width
            height
          }
        }
      }
    }
  }
`;
var get_basket_query_default = GET_BASKET_QUERY;

// app/service-api.ts
init_react();
async function serviceApi({
  uri = `https://remix-service-api.vercel.app/api/graphql`,
  query,
  variables
}) {
  const body = JSON.stringify({ query, variables });
  const response = await fetch(uri, {
    method: "post",
    headers: {
      "content-type": "application/json"
    },
    body
  });
  if (!response.ok) {
    throw new Error(await response.text());
  }
  const json3 = await response.json();
  if (json3.errors) {
    console.error("Service API encountered an error", json3.errors);
  }
  return json3;
}

// app/components/basket/index.tsx
var BasketContext = import_react.default.createContext(void 0);
var useBasket = () => import_react.default.useContext(BasketContext);
function clientCartItemForAPI({ id, sku, path, quantity, priceVariantIdentifier, stock }) {
  return { id, sku, path, quantity, priceVariantIdentifier, stock };
}
function BasketProvider({ locale: locale2, children }) {
  const [
    {
      status,
      clientBasket,
      serverBasket,
      totalQuantity,
      changeTriggeredByOtherTab,
      attentionCartItem
    },
    dispatch
  ] = (0, import_react.useReducer)(reducer_default, initialState);
  const sharedChannelRef = (0, import_react.useRef)(getChannel());
  (0, import_react.useEffect)(() => {
    (async function init() {
      const cache = await retrieveFromCache();
      dispatch(__spreadValues({ action: "hydrate" }, cache));
    })();
    if (sharedChannelRef.current) {
      sharedChannelRef.current.onmessage = function(event) {
        dispatch(__spreadValues({ action: "channel-update" }, JSON.parse(event.data)));
      };
    }
  }, []);
  (0, import_react.useEffect)(() => {
    if (status !== "not-hydrated") {
      persistToCache(__spreadProps(__spreadValues({}, clientBasket), {
        cart: clientBasket.cart.map(clientCartItemForAPI)
      }));
    }
  }, [status, clientBasket]);
  (0, import_react.useEffect)(() => {
    var _a;
    if (status === "ready") {
      if (!changeTriggeredByOtherTab) {
        (_a = sharedChannelRef.current) == null ? void 0 : _a.postMessage(JSON.stringify({
          clientBasket,
          serverBasket
        }));
      }
    }
  }, [status, clientBasket, serverBasket, changeTriggeredByOtherTab]);
  const basketModel = (0, import_react.useMemo)(() => ({
    locale: locale2,
    cart: clientBasket.cart.map(clientCartItemForAPI),
    voucherCode: clientBasket.voucherCode,
    crystallizeOrderId: clientBasket.crystallizeOrderId,
    klarnaOrderId: clientBasket.klarnaOrderId
  }), [locale2, clientBasket]);
  (0, import_react.useEffect)(() => {
    let stale = false;
    async function getServerBasket() {
      try {
        const response = await serviceApi({
          query: get_basket_query_default,
          variables: {
            basketModel
          }
        });
        if (!stale && response.data) {
          dispatch({
            action: "set-server-basket",
            serverBasket: response.data.basket
          });
        }
      } catch (error) {
        console.log(error);
        dispatch({
          action: "server-update-failed"
        });
      }
    }
    let timeout;
    if (status === "server-basket-is-stale") {
      timeout = setTimeout(getServerBasket, 250);
    }
    return () => {
      stale = true;
      clearTimeout(timeout);
    };
  }, [status, locale2.crystallizeCatalogueLanguage, basketModel]);
  function dispatchCartItemAction(action) {
    return (data) => dispatch(__spreadValues({ action }, data));
  }
  function withLocalState(item) {
    if (item.sku.startsWith("--voucher--")) {
      return item;
    }
    const clientBasketCartItem = clientBasket.cart.find((c) => c.sku === item.sku);
    if (!clientBasketCartItem) {
      return null;
    }
    return __spreadProps(__spreadValues({}, item), {
      quantity: clientBasketCartItem.quantity
    });
  }
  const cart = ((serverBasket == null ? void 0 : serverBasket.cart) || []).map(withLocalState).filter(Boolean);
  if (status === "server-update-failed") {
    return /* @__PURE__ */ import_react.default.createElement("div", {
      style: { margin: "0 auto", maxWidth: 400, padding: 50 }
    }, "Oh-uh. Something went wrong when getting data from the Service API", /* @__PURE__ */ import_react.default.createElement("br", null), /* @__PURE__ */ import_react.default.createElement("br", null), /* @__PURE__ */ import_react.default.createElement("button", {
      onClick: () => dispatch({ action: "retry-server-update" })
    }, "Try again"));
  }
  return /* @__PURE__ */ import_react.default.createElement(BasketContext.Provider, {
    value: {
      status,
      basketModel,
      cart,
      total: (serverBasket == null ? void 0 : serverBasket.total) || {},
      totalQuantity,
      attentionCartItem,
      actions: {
        addVoucherCode: (voucherCode) => dispatch({ action: "add-voucher", voucherCode }),
        removeVoucherCode: () => dispatch({ action: "remove-voucher" }),
        empty: () => dispatch({ action: "empty" }),
        addItem: dispatchCartItemAction("add-item"),
        removeItem: dispatchCartItemAction("remove-item"),
        incrementItem: dispatchCartItemAction("increment-item"),
        decrementItem: dispatchCartItemAction("decrement-item"),
        drawAttention: (sku) => dispatch({ action: "draw-attention", sku }),
        setCrystallizeOrderId: (crystallizeOrderId) => dispatch({
          action: "set-crystallize-order-id",
          crystallizeOrderId
        }),
        setKlarnaOrderId: (klarnaOrderId) => dispatch({ action: "set-klarna-order-id", klarnaOrderId })
      }
    }
  }, children);
}

// app/config/locale.ts
init_react();
var locale = {
  locale: "en",
  displayName: "English - US",
  appLanguage: "en-US",
  crystallizeCatalogueLanguage: "en",
  crystallizePriceVariant: "default"
};

// app/components/basket/basket-button.tsx
init_react();
var BasketButton = () => {
  let totalQuantity;
  const basket = useBasket();
  if (basket) {
    totalQuantity = basket.totalQuantity;
  } else {
    totalQuantity = "0";
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: "relative"
  }, /* @__PURE__ */ React.createElement("svg", {
    width: "46",
    height: "41",
    viewBox: "0 0 46 41",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M39.5255 7.38001H24.4309C23.8251 7.38001 23.2441 7.59599 22.8157 7.98044C22.3873 8.36489 22.1467 8.88631 22.1467 9.43C22.1467 9.9737 22.3873 10.4951 22.8157 10.8796C23.2441 11.264 23.8251 11.48 24.4309 11.48H39.5255C39.7149 11.4785 39.9025 11.5146 40.0746 11.5856C40.2468 11.6566 40.3994 11.7608 40.5216 11.8908C40.6438 12.0207 40.7325 12.1733 40.7814 12.3376C40.8303 12.5019 40.8383 12.6738 40.8047 12.8412L37.3417 27.7406C37.29 28.0092 37.1342 28.2528 36.9018 28.4284C36.6694 28.6039 36.3754 28.7001 36.0716 28.7H21.2695C20.9657 28.7001 20.6717 28.6039 20.4393 28.4284C20.2069 28.2528 20.0511 28.0092 19.9994 27.7406L14.9466 1.64001C14.8448 1.17693 14.5667 0.760047 14.1599 0.46083C13.7532 0.161613 13.2431 -0.00130406 12.7171 7.86192e-06H2.28254C1.93447 0.000245256 1.59105 0.0718674 1.27853 0.209404C0.96601 0.346941 0.692643 0.546755 0.479311 0.793586C0.265979 1.04042 0.118323 1.32774 0.0476204 1.6336C-0.0230824 1.93947 -0.0149621 2.25579 0.0713611 2.55841C0.210204 3.01137 0.514338 3.40944 0.935098 3.68893C1.35586 3.96842 1.86892 4.11316 2.39219 4.10001H10.8532L15.5314 28.4376C15.7668 29.6528 16.4703 30.7553 17.519 31.5526C18.5677 32.3498 19.8951 32.7913 21.2695 32.8H36.0716C37.4523 32.799 38.7884 32.361 39.8446 31.5631C40.9009 30.7651 41.6097 29.6584 41.8463 28.4376L45.3093 13.53C45.4529 12.7745 45.411 12 45.1866 11.2606C44.9621 10.5212 44.5604 9.83463 44.0096 9.24896C43.4588 8.66329 42.7722 8.19261 41.9977 7.86979C41.2231 7.54698 40.3794 7.37983 39.5255 7.38001V7.38001Z",
    fill: "#373567"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M33.2367 18.8599C33.8425 18.8599 34.4235 18.6439 34.8519 18.2595C35.2803 17.875 35.521 17.3536 35.521 16.8099C35.521 16.2662 35.2803 15.7448 34.8519 15.3603C34.4235 14.9759 33.8425 14.7599 33.2367 14.7599H25.927C25.3212 14.7599 24.7401 14.9759 24.3118 15.3603C23.8834 15.7448 23.6427 16.2662 23.6427 16.8099C23.6427 17.3536 23.8834 17.875 24.3118 18.2595C24.7401 18.6439 25.3212 18.8599 25.927 18.8599H33.2367Z",
    fill: "#373567"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M22.2723 41.0001C24.0385 41.0001 25.4703 39.7152 25.4703 38.1301C25.4703 36.5451 24.0385 35.2601 22.2723 35.2601C20.5061 35.2601 19.0743 36.5451 19.0743 38.1301C19.0743 39.7152 20.5061 41.0001 22.2723 41.0001Z",
    fill: "#373567"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M35.0643 41.0001C36.8305 41.0001 38.2623 39.7152 38.2623 38.1301C38.2623 36.5451 36.8305 35.2601 35.0643 35.2601C33.2981 35.2601 31.8663 36.5451 31.8663 38.1301C31.8663 39.7152 33.2981 41.0001 35.0643 41.0001Z",
    fill: "#373567"
  })), /* @__PURE__ */ React.createElement("div", {
    className: "w-5 h-5 absolute bg-text rounded-full text-primary text-center -right-2 -top-2 text-sm"
  }, totalQuantity));
};

// route:/home/aleksep/remix/donat/app/root.tsx
var import_react_query = require("react-query");

// app/components/404.tsx
init_react();
var import_remix2 = __toESM(require_remix());

// assets/error.svg
var error_default = "/build/_assets/error-QFEJFKUP.svg";

// app/components/404.tsx
var ErrorComponent = () => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "lg:w-content w-full mx-auto flex flex-col mt-20 gap-5 items-center justify-center"
  }, /* @__PURE__ */ React.createElement("img", {
    src: `${error_default}`
  }), /* @__PURE__ */ React.createElement("p", {
    className: "text-text text-center"
  }, "Someone ate the wrong doughnut."), /* @__PURE__ */ React.createElement(import_remix2.Link, {
    prefetch: "intent",
    to: "/",
    className: "bg-white font-semibold px-5 py-3 w-60 text-center"
  }, "Get me out of here"));
};

// route:/home/aleksep/remix/donat/app/root.tsx
var queryClient = new import_react_query.QueryClient();
var meta = () => {
  return { title: "Dounut" };
};
function links() {
  return [{ rel: "stylesheet", href: tailwind_default }];
}
var loader = () => {
  return {
    ENV: {
      SERVICE_API_URL: process.env.SERVICE_API_URL,
      TENANT_IDENTIFIER: process.env.CRYSTALLIZE_TENANT_IDENTIFIER,
      NODE_EXECUTION_MODE: process.env.NODE_EXECUTION_MODE
    }
  };
};
function App() {
  const data = (0, import_remix3.useLoaderData)();
  if (typeof window !== "undefined") {
    window.addEventListener("load", function() {
      navigator.serviceWorker.register("/sw.js").then(function(registration) {
        console.log("ServiceWorker registration successful with scope: ", registration.scope);
      }, function(err) {
        console.log("ServiceWorker registration failed: ", err);
      });
    });
  }
  return /* @__PURE__ */ React.createElement("html", {
    lang: "en",
    className: "bg-primary relative z-10"
  }, /* @__PURE__ */ React.createElement("head", null, /* @__PURE__ */ React.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "apple-mobile-web-app-capable",
    content: "yes"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "mobile-web-app-capable",
    content: "yes"
  }), /* @__PURE__ */ React.createElement("link", {
    rel: "apple-touch-icon",
    href: "/icons/windows11/Square150x150Logo.scale-100.png"
  }), /* @__PURE__ */ React.createElement("link", {
    rel: "icon",
    type: "image/png",
    href: "/icons/windows11/Square150x150Logo.scale-100.png"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "msapplication-TileColor",
    content: "#ffffff"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "msapplication-TileImage",
    content: "/icons/windows11/Square150x150Logo.scale-100.png"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "theme-color",
    content: "#ffffff"
  }), /* @__PURE__ */ React.createElement("link", {
    rel: "apple-touch-startup-image",
    href: "/images/icons/windows11/Square150x150Logo.scale-100.png"
  }), /* @__PURE__ */ React.createElement("meta", {
    name: "apple-mobile-web-app-title",
    content: "Dounot"
  }), /* @__PURE__ */ React.createElement("link", {
    rel: "manifest",
    href: "/manifest.json"
  }), /* @__PURE__ */ React.createElement(import_remix3.Meta, null), /* @__PURE__ */ React.createElement(import_remix3.Links, null), /* @__PURE__ */ React.createElement("script", {
    suppressHydrationWarning: true,
    type: "text/css"
  }, '*,:after,:before{box-sizing:border-box;border:0 solid}:after,:before{--tw-content:""}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}body{margin:0;line-height:inherit}h2{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}figure,h2,p{margin:0}img,svg{display:block;vertical-align:middle}img{max-width:100%;height:auto}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-date-and-time-value{min-height:1.5em}*,:after,:before{--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.container{width:100%}@media (max-width:1024px){#grid-item{grid-column:span 3!important}}.absolute{position:absolute}.relative{position:relative}.-right-2{right:-.5rem}.-top-2{top:-.5rem}.z-10{z-index:10}.mx-auto{margin-left:auto;margin-right:auto}.mt-4{margin-top:1rem}.flex{display:flex}.h-80{height:20rem}.h-full{height:100%}.h-5{height:1.25rem}.w-full{width:100%}.w-60{width:15rem}.w-5{width:1.25rem}.flex-col{flex-direction:column}.items-start{align-items:flex-start}.items-center{align-items:center}.justify-between{justify-content:space-between}.justify-evenly{justify-content:space-evenly}.gap-5{gap:1.25rem}.gap-1{gap:.25rem}.self-end{align-self:flex-end}.overflow-hidden{overflow:hidden}.rounded-xl{border-radius:.75rem}.rounded-2xl{border-radius:1rem}.rounded-full{border-radius:1000px}.rounded-r-xl{border-top-right-radius:.75rem;border-bottom-right-radius:.75rem}.bg-primary{--tw-bg-opacity:1;background-color:rgb(255 247 240/var(--tw-bg-opacity))}.bg-background1{--tw-bg-opacity:1;background-color:rgb(240 239 235/var(--tw-bg-opacity))}.bg-grey{background-color:#00000008}.bg-text{--tw-bg-opacity:1;background-color:rgb(55 53 103/var(--tw-bg-opacity))}.p-8{padding:2rem}.p-5{padding:1.25rem}.px-5{padding-left:1.25rem;padding-right:1.25rem}.px-2{padding-left:.5rem;padding-right:.5rem}.py-1{padding-top:.25rem;padding-bottom:.25rem}.py-7{padding-top:1.75rem;padding-bottom:1.75rem}.py-20{padding-top:5rem;padding-bottom:5rem}.text-center{text-align:center}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-sm{font-size:.875rem;line-height:1.25rem}.font-bold{font-weight:700}.text-primary{--tw-text-opacity:1;color:rgb(255 247 240/var(--tw-text-opacity))}'), /* @__PURE__ */ React.createElement("script", {
    defer: true,
    src: "https://pim.crystallize.com/static/frontend-preview-listener.js"
  })), /* @__PURE__ */ React.createElement("body", null, /* @__PURE__ */ React.createElement(import_react_query.QueryClientProvider, {
    client: queryClient
  }, /* @__PURE__ */ React.createElement(BasketProvider, {
    locale
  }, /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(import_remix3.Outlet, null), /* @__PURE__ */ React.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `window.ENV = ${JSON.stringify(data.ENV)}`
    }
  }), /* @__PURE__ */ React.createElement(import_remix3.ScrollRestoration, null), data.ENV.NODE_EXECUTION_MODE === "development" && /* @__PURE__ */ React.createElement(import_remix3.LiveReload, null)))), /* @__PURE__ */ React.createElement(import_remix3.Scripts, null)));
}
function Layout({ children }) {
  return /* @__PURE__ */ React.createElement("div", {
    className: "remix-app lg:w-content w-full mx-auto p-8 sm:px-6"
  }, /* @__PURE__ */ React.createElement("header", {
    className: "remix-app__header"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "container remix-app__header-content flex justify-between"
  }, /* @__PURE__ */ React.createElement(import_remix3.Link, {
    prefetch: "intent",
    to: "/",
    title: "Remix",
    className: "remix-app__header-home-link"
  }, /* @__PURE__ */ React.createElement(Logo, null)), /* @__PURE__ */ React.createElement(import_remix3.Link, {
    prefetch: "intent",
    to: "/cart",
    title: "Your cart",
    className: "remix-app__header-link"
  }, /* @__PURE__ */ React.createElement(BasketButton, null)))), /* @__PURE__ */ React.createElement("div", {
    className: "remix-app__main"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "container remix-app__main-content"
  }, children)), /* @__PURE__ */ React.createElement("footer", {
    className: "remix-app__footer"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "container remix-app__footer-content mt-40"
  }, /* @__PURE__ */ React.createElement(import_remix3.Link, {
    prefetch: "intent",
    to: "/",
    title: "Remix",
    className: "remix-app__header-home-link"
  }, /* @__PURE__ */ React.createElement(Logo, null)))));
}
function Logo(props) {
  return /* @__PURE__ */ React.createElement("svg", __spreadValues({
    width: "49",
    height: "54",
    viewBox: "0 0 49 54",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React.createElement("path", {
    d: "M7.45312 18.0625H3.66797L3.69141 14.8984H7.45312C8.23438 14.8984 8.89453 14.7109 9.43359 14.3359C9.98047 13.9609 10.3945 13.4023 10.6758 12.6602C10.9648 11.9102 11.1094 10.9883 11.1094 9.89453V9.15625C11.1094 8.33594 11.0273 7.61719 10.8633 7C10.707 6.375 10.4727 5.85547 10.1602 5.44141C9.84766 5.01953 9.45703 4.70312 8.98828 4.49219C8.52734 4.28125 7.99609 4.17578 7.39453 4.17578H3.59766V1H7.39453C8.55078 1 9.60938 1.19922 10.5703 1.59766C11.5391 1.98828 12.375 2.55078 13.0781 3.28516C13.7891 4.01172 14.3359 4.875 14.7188 5.875C15.1094 6.86719 15.3047 7.96875 15.3047 9.17969V9.89453C15.3047 11.0977 15.1094 12.1992 14.7188 13.1992C14.3359 14.1992 13.793 15.0625 13.0898 15.7891C12.3867 16.5156 11.5547 17.0781 10.5938 17.4766C9.64062 17.8672 8.59375 18.0625 7.45312 18.0625ZM6.02344 1V18.0625H1.91016V1H6.02344ZM31.8867 9.19141V9.88281C31.8867 11.1875 31.7031 12.3594 31.3359 13.3984C30.9766 14.4297 30.4648 15.3125 29.8008 16.0469C29.1367 16.7734 28.3516 17.332 27.4453 17.7227C26.5391 18.1055 25.5391 18.2969 24.4453 18.2969C23.3438 18.2969 22.3359 18.1055 21.4219 17.7227C20.5156 17.332 19.7266 16.7734 19.0547 16.0469C18.3906 15.3125 17.875 14.4297 17.5078 13.3984C17.1484 12.3594 16.9688 11.1875 16.9688 9.88281V9.19141C16.9688 7.88672 17.1484 6.71484 17.5078 5.67578C17.875 4.63672 18.3867 3.75391 19.043 3.02734C19.707 2.29297 20.4922 1.73438 21.3984 1.35156C22.3125 0.960938 23.3203 0.765625 24.4219 0.765625C25.5156 0.765625 26.5156 0.960938 27.4219 1.35156C28.3359 1.73438 29.125 2.29297 29.7891 3.02734C30.4531 3.75391 30.9688 4.63672 31.3359 5.67578C31.7031 6.71484 31.8867 7.88672 31.8867 9.19141ZM27.7148 9.88281V9.16797C27.7148 8.32422 27.6406 7.58203 27.4922 6.94141C27.3516 6.29297 27.1406 5.75 26.8594 5.3125C26.5781 4.875 26.2305 4.54688 25.8164 4.32812C25.4102 4.10156 24.9453 3.98828 24.4219 3.98828C23.875 3.98828 23.3984 4.10156 22.9922 4.32812C22.5859 4.54688 22.2461 4.875 21.9727 5.3125C21.6992 5.75 21.4922 6.29297 21.3516 6.94141C21.2188 7.58203 21.1523 8.32422 21.1523 9.16797V9.88281C21.1523 10.7188 21.2188 11.4609 21.3516 12.1094C21.4922 12.75 21.6992 13.293 21.9727 13.7383C22.2539 14.1836 22.5977 14.5195 23.0039 14.7461C23.418 14.9727 23.8984 15.0859 24.4453 15.0859C24.9688 15.0859 25.4336 14.9727 25.8398 14.7461C26.2461 14.5195 26.5859 14.1836 26.8594 13.7383C27.1406 13.293 27.3516 12.75 27.4922 12.1094C27.6406 11.4609 27.7148 10.7188 27.7148 9.88281ZM45.1875 1H46.6289V12.5547C46.6289 13.8359 46.3594 14.9023 45.8203 15.7539C45.2812 16.6055 44.5547 17.2422 43.6406 17.6641C42.7344 18.0859 41.7305 18.2969 40.6289 18.2969C39.4961 18.2969 38.4766 18.0859 37.5703 17.6641C36.6641 17.2422 35.9453 16.6055 35.4141 15.7539C34.8906 14.9023 34.6289 13.8359 34.6289 12.5547V1H36.0586V12.5547C36.0586 13.5469 36.2539 14.3789 36.6445 15.0508C37.0352 15.7227 37.5742 16.2266 38.2617 16.5625C38.9492 16.8984 39.7383 17.0664 40.6289 17.0664C41.5117 17.0664 42.2969 16.8984 42.9844 16.5625C43.6719 16.2266 44.2109 15.7227 44.6016 15.0508C44.9922 14.3789 45.1875 13.5469 45.1875 12.5547V1ZM16.1602 20V37.0625H12.0586L6.02344 26.4453V37.0625H1.91016V20H6.02344L12.0586 30.6172V20H16.1602ZM33.1992 28.1914V28.8828C33.1992 30.1875 33.0156 31.3594 32.6484 32.3984C32.2891 33.4297 31.7773 34.3125 31.1133 35.0469C30.4492 35.7734 29.6641 36.332 28.7578 36.7227C27.8516 37.1055 26.8516 37.2969 25.7578 37.2969C24.6562 37.2969 23.6484 37.1055 22.7344 36.7227C21.8281 36.332 21.0391 35.7734 20.3672 35.0469C19.7031 34.3125 19.1875 33.4297 18.8203 32.3984C18.4609 31.3594 18.2812 30.1875 18.2812 28.8828V28.1914C18.2812 26.8867 18.4609 25.7148 18.8203 24.6758C19.1875 23.6367 19.6992 22.7539 20.3555 22.0273C21.0195 21.293 21.8047 20.7344 22.7109 20.3516C23.625 19.9609 24.6328 19.7656 25.7344 19.7656C26.8281 19.7656 27.8281 19.9609 28.7344 20.3516C29.6484 20.7344 30.4375 21.293 31.1016 22.0273C31.7656 22.7539 32.2812 23.6367 32.6484 24.6758C33.0156 25.7148 33.1992 26.8867 33.1992 28.1914ZM29.0273 28.8828V28.168C29.0273 27.3242 28.9531 26.582 28.8047 25.9414C28.6641 25.293 28.4531 24.75 28.1719 24.3125C27.8906 23.875 27.543 23.5469 27.1289 23.3281C26.7227 23.1016 26.2578 22.9883 25.7344 22.9883C25.1875 22.9883 24.7109 23.1016 24.3047 23.3281C23.8984 23.5469 23.5586 23.875 23.2852 24.3125C23.0117 24.75 22.8047 25.293 22.6641 25.9414C22.5312 26.582 22.4648 27.3242 22.4648 28.168V28.8828C22.4648 29.7188 22.5312 30.4609 22.6641 31.1094C22.8047 31.75 23.0117 32.293 23.2852 32.7383C23.5664 33.1836 23.9102 33.5195 24.3164 33.7461C24.7305 33.9727 25.2109 34.0859 25.7578 34.0859C26.2812 34.0859 26.7461 33.9727 27.1523 33.7461C27.5586 33.5195 27.8984 33.1836 28.1719 32.7383C28.4531 32.293 28.6641 31.75 28.8047 31.1094C28.9531 30.4609 29.0273 29.7188 29.0273 28.8828ZM42.5859 20V37.0625H38.4727V20H42.5859ZM47.7188 20V23.1758H33.457V20H47.7188Z",
    fill: "#373567"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M7.01233 51.2188C6.46025 51.2188 5.95243 51.1172 5.48889 50.9141C5.03056 50.7109 4.62952 50.4245 4.28577 50.0547C3.94722 49.6849 3.6842 49.2474 3.4967 48.7422C3.31441 48.2318 3.22327 47.6745 3.22327 47.0703V46.7344C3.22327 46.0833 3.31962 45.4948 3.51233 44.9688C3.70504 44.4427 3.97066 43.9922 4.3092 43.6172C4.64775 43.2422 5.03316 42.9557 5.46545 42.7578C5.90295 42.5547 6.36129 42.4531 6.84045 42.4531C7.37691 42.4531 7.85347 42.5495 8.27014 42.7422C8.68681 42.9297 9.03577 43.1979 9.31702 43.5469C9.60347 43.8906 9.81962 44.2995 9.96545 44.7734C10.1113 45.2422 10.1842 45.7604 10.1842 46.3281V46.8984H3.78577V46.1016H9.25452V45.9922C9.2441 45.5182 9.14775 45.0755 8.96545 44.6641C8.78837 44.2474 8.52275 43.9089 8.16858 43.6484C7.81441 43.388 7.3717 43.2578 6.84045 43.2578C6.44462 43.2578 6.08004 43.3411 5.7467 43.5078C5.41858 43.6745 5.13472 43.9141 4.89514 44.2266C4.66077 44.5339 4.47847 44.901 4.34827 45.3281C4.22327 45.75 4.16077 46.2188 4.16077 46.7344V47.0703C4.16077 47.5391 4.22847 47.9766 4.36389 48.3828C4.50452 48.7839 4.70243 49.138 4.95764 49.4453C5.21806 49.7526 5.52535 49.9922 5.87952 50.1641C6.23368 50.3359 6.62431 50.4219 7.05139 50.4219C7.55139 50.4219 7.9941 50.3307 8.37952 50.1484C8.76493 49.9609 9.11129 49.6667 9.41858 49.2656L10.0045 49.7188C9.82222 49.9896 9.59306 50.2396 9.31702 50.4688C9.04618 50.6979 8.72066 50.8802 8.34045 51.0156C7.96025 51.151 7.51754 51.2188 7.01233 51.2188ZM17.1686 49.5469V45.1875C17.1686 44.7865 17.0852 44.4401 16.9186 44.1484C16.7519 43.8568 16.5071 43.6328 16.1842 43.4766C15.8613 43.3203 15.4628 43.2422 14.9889 43.2422C14.5514 43.2422 14.1608 43.3203 13.817 43.4766C13.4785 43.6276 13.2102 43.8333 13.0123 44.0938C12.8196 44.349 12.7233 44.6328 12.7233 44.9453L11.7858 44.9375C11.7858 44.6198 11.8639 44.3125 12.0201 44.0156C12.1764 43.7188 12.3977 43.4531 12.6842 43.2188C12.9707 42.9844 13.3118 42.7995 13.7076 42.6641C14.1087 42.5234 14.5488 42.4531 15.028 42.4531C15.6321 42.4531 16.1634 42.5547 16.6217 42.7578C17.0852 42.9609 17.4472 43.2656 17.7076 43.6719C17.9681 44.0781 18.0983 44.5885 18.0983 45.2031V49.2891C18.0983 49.5807 18.1191 49.8828 18.1608 50.1953C18.2076 50.5078 18.2727 50.7656 18.3561 50.9688V51.0625H17.3639C17.3014 50.875 17.2519 50.6406 17.2155 50.3594C17.1842 50.0729 17.1686 49.8021 17.1686 49.5469ZM17.3873 46.1406L17.403 46.8594H15.567C15.0878 46.8594 14.6582 46.9036 14.278 46.9922C13.903 47.0755 13.5852 47.2005 13.3248 47.3672C13.0644 47.5286 12.8639 47.724 12.7233 47.9531C12.5878 48.1823 12.5201 48.4427 12.5201 48.7344C12.5201 49.0365 12.5957 49.3125 12.7467 49.5625C12.903 49.8125 13.1217 50.013 13.403 50.1641C13.6894 50.3099 14.028 50.3828 14.4186 50.3828C14.9394 50.3828 15.3977 50.2865 15.7936 50.0938C16.1946 49.901 16.5253 49.6484 16.7858 49.3359C17.0462 49.0234 17.2207 48.6823 17.3092 48.3125L17.7155 48.8516C17.6477 49.112 17.5227 49.3802 17.3405 49.6562C17.1634 49.9271 16.9316 50.1823 16.6451 50.4219C16.3587 50.6562 16.0201 50.849 15.6295 51C15.2441 51.1458 14.8066 51.2188 14.317 51.2188C13.7649 51.2188 13.2832 51.1146 12.8717 50.9062C12.4655 50.6979 12.1477 50.4141 11.9186 50.0547C11.6946 49.6901 11.5826 49.2786 11.5826 48.8203C11.5826 48.4036 11.6712 48.0312 11.8483 47.7031C12.0253 47.3698 12.2806 47.0885 12.6139 46.8594C12.9524 46.625 13.3587 46.4479 13.8326 46.3281C14.3118 46.2031 14.8483 46.1406 15.442 46.1406H17.3873ZM23.8014 42.6094V43.375H19.567V42.6094H23.8014ZM21.1217 40.4375H22.0514V49.0078C22.0514 49.3984 22.1035 49.6927 22.2076 49.8906C22.3118 50.0885 22.4472 50.2214 22.6139 50.2891C22.7806 50.3568 22.9602 50.3906 23.153 50.3906C23.2936 50.3906 23.429 50.3828 23.5592 50.3672C23.6894 50.3464 23.8066 50.3255 23.9108 50.3047L23.9498 51.0938C23.8352 51.1302 23.6868 51.1589 23.5045 51.1797C23.3222 51.2057 23.1399 51.2188 22.9576 51.2188C22.5983 51.2188 22.2806 51.1536 22.0045 51.0234C21.7285 50.888 21.5123 50.6589 21.3561 50.3359C21.1998 50.0078 21.1217 49.5625 21.1217 49V40.4375ZM34.8092 49.5469V45.1875C34.8092 44.7865 34.7259 44.4401 34.5592 44.1484C34.3925 43.8568 34.1477 43.6328 33.8248 43.4766C33.5019 43.3203 33.1035 43.2422 32.6295 43.2422C32.192 43.2422 31.8014 43.3203 31.4576 43.4766C31.1191 43.6276 30.8509 43.8333 30.653 44.0938C30.4602 44.349 30.3639 44.6328 30.3639 44.9453L29.4264 44.9375C29.4264 44.6198 29.5045 44.3125 29.6608 44.0156C29.817 43.7188 30.0384 43.4531 30.3248 43.2188C30.6113 42.9844 30.9524 42.7995 31.3483 42.6641C31.7493 42.5234 32.1894 42.4531 32.6686 42.4531C33.2727 42.4531 33.804 42.5547 34.2623 42.7578C34.7259 42.9609 35.0878 43.2656 35.3483 43.6719C35.6087 44.0781 35.7389 44.5885 35.7389 45.2031V49.2891C35.7389 49.5807 35.7597 49.8828 35.8014 50.1953C35.8483 50.5078 35.9134 50.7656 35.9967 50.9688V51.0625H35.0045C34.942 50.875 34.8925 50.6406 34.8561 50.3594C34.8248 50.0729 34.8092 49.8021 34.8092 49.5469ZM35.028 46.1406L35.0436 46.8594H33.2076C32.7285 46.8594 32.2988 46.9036 31.9186 46.9922C31.5436 47.0755 31.2259 47.2005 30.9655 47.3672C30.705 47.5286 30.5045 47.724 30.3639 47.9531C30.2285 48.1823 30.1608 48.4427 30.1608 48.7344C30.1608 49.0365 30.2363 49.3125 30.3873 49.5625C30.5436 49.8125 30.7623 50.013 31.0436 50.1641C31.33 50.3099 31.6686 50.3828 32.0592 50.3828C32.58 50.3828 33.0384 50.2865 33.4342 50.0938C33.8352 49.901 34.166 49.6484 34.4264 49.3359C34.6868 49.0234 34.8613 48.6823 34.9498 48.3125L35.3561 48.8516C35.2884 49.112 35.1634 49.3802 34.9811 49.6562C34.804 49.9271 34.5722 50.1823 34.2858 50.4219C33.9993 50.6562 33.6608 50.849 33.2701 51C32.8847 51.1458 32.4472 51.2188 31.9576 51.2188C31.4056 51.2188 30.9238 51.1146 30.5123 50.9062C30.1061 50.6979 29.7884 50.4141 29.5592 50.0547C29.3352 49.6901 29.2233 49.2786 29.2233 48.8203C29.2233 48.4036 29.3118 48.0312 29.4889 47.7031C29.666 47.3698 29.9212 47.0885 30.2545 46.8594C30.5931 46.625 30.9993 46.4479 31.4733 46.3281C31.9524 46.2031 32.4889 46.1406 33.0826 46.1406H35.028ZM39.2858 39.0625V51.0625H38.3561V39.0625H39.2858ZM42.8795 39.0625V51.0625H41.9498V39.0625H42.8795Z",
    fill: "#373567"
  }));
}
function ErrorBoundary() {
  return /* @__PURE__ */ React.createElement("html", {
    className: "bg-primary"
  }, /* @__PURE__ */ React.createElement("head", null, /* @__PURE__ */ React.createElement("title", null, "Oh no!"), /* @__PURE__ */ React.createElement(import_remix3.Meta, null), /* @__PURE__ */ React.createElement(import_remix3.Links, null)), /* @__PURE__ */ React.createElement("body", {
    style: { height: "100vh" }
  }, /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(ErrorComponent, null)), /* @__PURE__ */ React.createElement(import_remix3.Scripts, null)));
}
function CatchBoundary() {
  return /* @__PURE__ */ React.createElement("html", {
    className: "bg-primary"
  }, /* @__PURE__ */ React.createElement("head", null, /* @__PURE__ */ React.createElement("title", null, "Oh no!"), /* @__PURE__ */ React.createElement(import_remix3.Meta, null), /* @__PURE__ */ React.createElement(import_remix3.Links, null)), /* @__PURE__ */ React.createElement("body", {
    style: { height: "100vh" }
  }, /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(ErrorComponent, null)), /* @__PURE__ */ React.createElement(import_remix3.Scripts, null)));
}

// route:/home/aleksep/remix/donat/app/routes/confirmation/$orderId.tsx
var orderId_exports = {};
__export(orderId_exports, {
  ConfirmationStripe: () => ConfirmationStripe,
  default: () => orderId_default,
  loader: () => loader2
});
init_react();

// app/clients.ts
init_react();
var import_graphql_request = require("graphql-request");
var CATALOGUE_API_URL = `https://api.crystallize.com/tsvetochki-test/catalogue`;
var catalogueClient = new import_graphql_request.GraphQLClient(CATALOGUE_API_URL);
var serviceAPIClient = new import_graphql_request.GraphQLClient(`https://remix-service-api.vercel.app/api/graphql`, {
  credentials: "include",
  mode: "cors"
});

// app/service-api/get-order.generated.ts
init_react();
var GetOrderDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "GetOrder" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "id" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "orders" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "get" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "id" } } }] }] } }] } }] };

// route:/home/aleksep/remix/donat/app/routes/confirmation/$orderId.tsx
var import_remix4 = __toESM(require_remix());

// app/components/confirmation.tsx
init_react();
var import_react2 = require("react");
function Confirmation({ order, success }) {
  const basket = useBasket();
  if (success) {
    basket.actions.empty();
  }
  (0, import_react2.useEffect)(() => {
    if (!order) {
      const t = setTimeout(() => window.location.reload(), 5e3);
      return () => clearTimeout(t);
    }
  }, [order]);
  if (!order) {
    return /* @__PURE__ */ React.createElement("p", null, "Loading...");
  }
  const cart = order.cart.map((item) => __spreadProps(__spreadValues({}, item), {
    image: {
      url: item.imageUrl
    }
  }));
  const { total } = order;
  return /* @__PURE__ */ React.createElement("div", {
    className: "w-auth p-20 bg-background3 mx-auto mt-20 text-text"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h1", {
    className: "font-bold text-3xl mb-6"
  }, "Order Confirmation"), /* @__PURE__ */ React.createElement("p", {
    className: "mb-5"
  }, "We\u2019ve received your order #", order.id, "."), /* @__PURE__ */ React.createElement("div", null, cart.map((item, index) => {
    return /* @__PURE__ */ React.createElement("div", {
      key: index,
      className: "flex justify-between mb-4"
    }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", null, item.name, " x ", item.quantity)), /* @__PURE__ */ React.createElement("p", null, "$", item.price.gross * item.quantity));
  }), /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col gap-3 border-t-2 pt-5"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-between"
  }, /* @__PURE__ */ React.createElement("p", null, "Subtotal"), /* @__PURE__ */ React.createElement("p", null, "$", total.gross)), /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-between"
  }, /* @__PURE__ */ React.createElement("p", null, "Tax"), /* @__PURE__ */ React.createElement("p", null, "$", total.net - total.gross)), /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-between"
  }, /* @__PURE__ */ React.createElement("p", {
    className: "font-bold"
  }, "Total"), /* @__PURE__ */ React.createElement("p", null, "$", total.net))))));
}

// route:/home/aleksep/remix/donat/app/routes/confirmation/$orderId.tsx
var loader2 = async ({ params }) => {
  const data = await serviceAPIClient.request(GetOrderDocument, { id: params.orderId });
  return { data };
};
var ConfirmationStripe = () => {
  var _a, _b;
  const data = (0, import_remix4.useLoaderData)();
  const order = (_b = (_a = data.data) == null ? void 0 : _a.orders) == null ? void 0 : _b.get;
  return /* @__PURE__ */ React.createElement("div", null, order ? /* @__PURE__ */ React.createElement(Confirmation, {
    order,
    success: true
  }) : /* @__PURE__ */ React.createElement("div", {
    className: "w-auth p-20 bg-background3 mx-auto mt-20 text-text"
  }, /* @__PURE__ */ React.createElement("p", null, "Please wait for the order to be processed...")));
};
var orderId_default = ConfirmationStripe;

// route:/home/aleksep/remix/donat/app/routes/shop/$product.tsx
var product_exports = {};
__export(product_exports, {
  default: () => Index,
  headers: () => headers,
  loader: () => loader3,
  meta: () => meta2
});
init_react();
var import_remix6 = __toESM(require_remix());

// app/crystallize/queries/product.generated.ts
init_react();

// app/crystallize/fragments/content.generated.ts
init_react();
var SingleLineFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "singleLine" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "SingleLineContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "text" } }] } }] };
var RichTextFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "richText" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "RichTextContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "json" } }, { "kind": "Field", "name": { "kind": "Name", "value": "html" } }, { "kind": "Field", "name": { "kind": "Name", "value": "plainText" } }] } }] };
var BooleanFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "boolean" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "BooleanContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }] };
var NumericFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "numeric" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "NumericContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "number" } }, { "kind": "Field", "name": { "kind": "Name", "value": "unit" } }] } }] };
var LocationFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "location" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "LocationContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "lat" } }, { "kind": "Field", "name": { "kind": "Name", "value": "long" } }] } }] };
var DateTimeFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "dateTime" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "DatetimeContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "datetime" } }] } }] };
var SelectionFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "selection" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "SelectionContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "options" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }] } }] };
var ImageFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "image" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Image" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "altText" } }, { "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "variants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }, { "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "size" } }] } }] } }] };
var ImagesFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "images" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ImageContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "images" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "image" } }] } }] } }, ...ImageFragmentDoc.definitions] };
var VideoFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "video" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Video" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "id" } }, { "kind": "Field", "name": { "kind": "Name", "value": "title" } }, { "kind": "Field", "name": { "kind": "Name", "value": "playlists" } }, { "kind": "Field", "name": { "kind": "Name", "value": "thumbnails" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "image" } }] } }] } }, ...ImageFragmentDoc.definitions] };
var VideosFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "videos" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "VideoContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "videos" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "video" } }] } }] } }, ...VideoFragmentDoc.definitions] };
var ParagraphCollectionFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "paragraphCollection" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ParagraphCollectionContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "paragraphs" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "title" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "singleLine" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "body" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "richText" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "images" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "image" } }, { "kind": "Field", "name": { "kind": "Name", "value": "caption" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "richText" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "videos" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "title" } }, { "kind": "Field", "name": { "kind": "Name", "value": "playlists" } }, { "kind": "Field", "name": { "kind": "Name", "value": "thumbnails" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "image" } }, { "kind": "Field", "name": { "kind": "Name", "value": "caption" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "richText" } }] } }] } }] } }] } }] } }, ...SingleLineFragmentDoc.definitions, ...RichTextFragmentDoc.definitions, ...ImageFragmentDoc.definitions] };
var PropertiesTableFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "propertiesTable" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PropertiesTableContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "sections" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PropertiesTableSection" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "title" } }, { "kind": "Field", "name": { "kind": "Name", "value": "properties" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }] } }] } }] } }] };
var ContentFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "content" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ComponentContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "singleLine" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "richText" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "boolean" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "numeric" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "location" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "dateTime" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "selection" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "images" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "videos" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "paragraphCollection" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "propertiesTable" } }] } }, ...SingleLineFragmentDoc.definitions, ...RichTextFragmentDoc.definitions, ...BooleanFragmentDoc.definitions, ...NumericFragmentDoc.definitions, ...LocationFragmentDoc.definitions, ...DateTimeFragmentDoc.definitions, ...SelectionFragmentDoc.definitions, ...ImagesFragmentDoc.definitions, ...VideosFragmentDoc.definitions, ...ParagraphCollectionFragmentDoc.definitions, ...PropertiesTableFragmentDoc.definitions] };
var ContentChunkFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "contentChunk" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ContentChunkContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "chunks" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "content" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "content" } }] } }] } }] } }, ...ContentFragmentDoc.definitions] };
var ComponentFragmentDoc = { "kind": "Document", "definitions": [{ "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "component" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Component" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "content" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "content" } }, { "kind": "FragmentSpread", "name": { "kind": "Name", "value": "contentChunk" } }] } }] } }, ...ContentFragmentDoc.definitions, ...ContentChunkFragmentDoc.definitions] };

// app/crystallize/queries/product.generated.ts
var ProductDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "Product" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "path" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "version" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "VersionLabel" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "alias": { "kind": "Name", "value": "product" }, "name": { "kind": "Name", "value": "catalogue" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "path" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "path" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "language" }, "value": { "kind": "StringValue", "value": "en", "block": false } }, { "kind": "Argument", "name": { "kind": "Name", "value": "version" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "version" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "alias": { "kind": "Name", "value": "summary" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "brief", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "component" } }] } }, { "kind": "Field", "alias": { "kind": "Name", "value": "body" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "body", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "component" } }] } }, { "kind": "Field", "alias": { "kind": "Name", "value": "table" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "nutrition", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "component" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Product" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "id" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "Field", "name": { "kind": "Name", "value": "path" } }, { "kind": "Field", "name": { "kind": "Name", "value": "defaultVariant" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "firstImage" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "altText" } }, { "kind": "Field", "name": { "kind": "Name", "value": "variants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }, { "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "size" } }] } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "variants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "id" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "sku" } }, { "kind": "Field", "name": { "kind": "Name", "value": "price" } }, { "kind": "Field", "name": { "kind": "Name", "value": "priceVariants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "identifier" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "price" } }, { "kind": "Field", "name": { "kind": "Name", "value": "currency" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "stock" } }, { "kind": "Field", "name": { "kind": "Name", "value": "isDefault" } }, { "kind": "Field", "name": { "kind": "Name", "value": "attributes" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "attribute" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "images" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "altText" } }, { "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "variants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }, { "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "size" } }] } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "vatType" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "percent" } }] } }] } }, { "kind": "Field", "alias": { "kind": "Name", "value": "related" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "related", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "content" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ItemRelationsContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "items" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "path" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "topics" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Product" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "defaultVariant" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "price" } }, { "kind": "Field", "name": { "kind": "Name", "value": "firstImage" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "altText" } }, { "kind": "Field", "name": { "kind": "Name", "value": "variants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "key" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }, { "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "size" } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, ...ComponentFragmentDoc.definitions] };

// app/crystallize/utils/normalizeDocumentNode.ts
init_react();
var import_filter = __toESM(require("lodash/fp/filter"));
var import_pipe = __toESM(require("lodash/fp/pipe"));
var import_uniqBy = __toESM(require("lodash/fp/uniqBy"));
function isFragmentDefinition(def) {
  return def.kind === "FragmentDefinition";
}
var notFragments = (0, import_filter.default)((def) => def.kind !== "FragmentDefinition");
var onlyUniqueFragments = (0, import_pipe.default)((0, import_filter.default)(isFragmentDefinition), (0, import_uniqBy.default)((def) => def.name));
function normalizeDocumentNode(doc) {
  if ("__normalized" in doc)
    return doc;
  return Object.assign(doc, {
    __normalized: true,
    definitions: [
      ...notFragments(doc.definitions),
      ...onlyUniqueFragments(doc.definitions)
    ]
  });
}

// app/components/product.tsx
init_react();
var import_react_content_transformer2 = require("@crystallize/react-content-transformer");
var import_react_image3 = require("@crystallize/react-image");

// app/crystallize/utils/componentContent.ts
init_react();
var componentContent = (o, v) => {
  return o && o["__typename"] === v ? o : null;
};

// app/components/product-body.tsx
init_react();
var import_react_content_transformer = require("@crystallize/react-content-transformer");
var import_react_image = require("@crystallize/react-image");
var import_react_player = __toESM(require("react-player"));
var ProductBody = ({ body, table }) => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col gap-3 my-10 lg:w-9/12 w-full mx-auto z-10"
  }, componentContent(body == null ? void 0 : body.content, "ParagraphCollectionContent").paragraphs.map((paragraph, index) => {
    var _a, _b;
    return /* @__PURE__ */ React.createElement("div", {
      key: index,
      className: "flex flex-col justify-between"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "my-3 text-text md:px-20"
    }, paragraph.title && /* @__PURE__ */ React.createElement("h2", {
      className: "font-semibold text-2xl mb-4"
    }, paragraph == null ? void 0 : paragraph.title.text), paragraph.body && /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(import_react_content_transformer.ContentTransformer, {
      json: (_a = paragraph.body) == null ? void 0 : _a.json
    }))), paragraph.images && /* @__PURE__ */ React.createElement("div", {
      className: "my-5"
    }, (_b = paragraph == null ? void 0 : paragraph.images) == null ? void 0 : _b.map((image) => /* @__PURE__ */ React.createElement(import_react_image.Image, __spreadProps(__spreadValues({}, image), {
      sizes: "200px",
      className: "rounded-xl overflow-hidden",
      loading: "lazy"
    })))), paragraph.videos && /* @__PURE__ */ React.createElement("div", {
      className: "my-5"
    }, /* @__PURE__ */ React.createElement(import_react_player.default, {
      controls: true,
      url: (paragraph == null ? void 0 : paragraph.videos) && (paragraph == null ? void 0 : paragraph.videos.length) > 0 && (paragraph == null ? void 0 : paragraph.videos[0].playlists[1]),
      width: "100%",
      height: "400px",
      light: (paragraph == null ? void 0 : paragraph.videos) && (paragraph == null ? void 0 : paragraph.videos.length) > 0 && (paragraph == null ? void 0 : paragraph.videos[0].thumbnails) && (paragraph == null ? void 0 : paragraph.videos[0].thumbnails.length) > 0 && (paragraph == null ? void 0 : paragraph.videos[0].thumbnails[0].url),
      playing: true
    })));
  }), componentContent(table == null ? void 0 : table.content, "PropertiesTableContent").sections.map((section, index) => /* @__PURE__ */ React.createElement("div", {
    key: index,
    className: "flex lg:flex-row flex-col justify-between text-text my-20"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h3", {
    className: "font-bold text-2xl py-2"
  }, section == null ? void 0 : section.title), /* @__PURE__ */ React.createElement("p", {
    className: "italic"
  }, "per 50 g")), /* @__PURE__ */ React.createElement("div", {
    className: "lg:w-7/12 w-full"
  }, section.properties.map((property, index2) => /* @__PURE__ */ React.createElement("div", {
    key: index2,
    className: "flex justify-between my-3 even:bg-grey px-5 py-2"
  }, /* @__PURE__ */ React.createElement("p", null, property.key), /* @__PURE__ */ React.createElement("p", null, property.value)))))));
};

// app/components/variant-selector.tsx
init_react();
var import_isEqual = __toESM(require("lodash/isEqual"));
function reduceAttributes(variants) {
  return variants.reduce((acc, variant) => {
    const attrs = acc;
    variant.attributes.forEach(({ attribute, value }) => {
      const currentAttribute = attrs[attribute];
      if (!currentAttribute) {
        attrs[attribute] = [value];
        return;
      }
      const valueExists = currentAttribute.find((str) => str === value);
      if (!valueExists) {
        attrs[attribute].push(value);
      }
    });
    return attrs;
  }, {});
}
function attributesToObject({ attributes }) {
  return Object.assign({}, ...attributes.map(({ attribute, value }) => ({ [attribute]: value })));
}
var VariantSelector = ({
  variants,
  selectedVariant,
  onVariantChange
}) => {
  const attributes = reduceAttributes(variants);
  function onAttributeSelect({ attribute, value, e }) {
    const selectedAttributes = attributesToObject(selectedVariant);
    selectedAttributes[attribute] = value;
    let variant = variants.find((variant2) => {
      if ((0, import_isEqual.default)(selectedAttributes, attributesToObject(variant2))) {
        return true;
      }
      return false;
    });
    if (variant) {
      onVariantChange(variant);
    }
  }
  return /* @__PURE__ */ React.createElement("div", null, Object.keys(attributes).map((attribute) => {
    const attr = attributes[attribute];
    const selectedAttr = selectedVariant.attributes.find((a) => a.attribute === attribute);
    if (!selectedAttr) {
      return null;
    }
    return /* @__PURE__ */ React.createElement("div", {
      key: attribute,
      className: "w-40"
    }, /* @__PURE__ */ React.createElement("p", {
      className: "my-3 text-text font-semibold"
    }, attribute), /* @__PURE__ */ React.createElement("div", {
      className: "flex justify-between mb-5"
    }, attr.map((value) => /* @__PURE__ */ React.createElement("button", {
      key: value,
      onClick: (e) => onAttributeSelect({
        attribute,
        value,
        e
      }),
      type: "button",
      className: "bg-white drop-shadow-sm w-30 px-3 py-2 rounded-sm text-text font-semibold",
      style: {
        border: value === selectedAttr.value ? "3px solid #373567" : "3px solid transparent"
      }
    }, value))));
  }));
};

// app/components/related-products.tsx
init_react();
var import_react_image2 = require("@crystallize/react-image");
var import_remix5 = __toESM(require_remix());
var RelatedProducts = ({ related }) => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "flex w-full items-start flex-wrap gap-1"
  }, componentContent(related.content, "ItemRelationsContent").items.map((item, index) => {
    var _a;
    return /* @__PURE__ */ React.createElement(import_remix5.Link, {
      prefetch: "intent",
      to: item.path,
      key: index,
      className: "bg-primary px-4 py-3 rounded-xl border-2 border-grey md:w-80 w-full h-80"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "flex flex-col"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "flex justify-between"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "flex gap-1"
    }, (_a = item.topics) == null ? void 0 : _a.map((topic) => /* @__PURE__ */ React.createElement("div", {
      className: "text-sm bg-grey px-2 py-1 rounded-2xl",
      key: topic.name
    }, topic.name))), /* @__PURE__ */ React.createElement("div", null, "$", componentContent(item, "Product").defaultVariant.price)), /* @__PURE__ */ React.createElement(import_react_image2.Image, __spreadProps(__spreadValues({}, componentContent(item, "Product").defaultVariant.firstImage), {
      sizes: "300px",
      loading: "lazy"
    })), /* @__PURE__ */ React.createElement("h2", {
      className: "text-l text-center m-auto"
    }, item.name)));
  }));
};

// app/components/product.tsx
var import_react3 = require("react");
var Product = ({ product }) => {
  var _a;
  let item = componentContent(product, "Product");
  const [selectedVariant, setSelectedVariant] = (0, import_react3.useState)(item.variants[0]);
  const basket = useBasket();
  const onVariantChange = (variant) => setSelectedVariant(variant);
  const buy = () => {
    var _a2;
    (_a2 = basket == null ? void 0 : basket.actions) == null ? void 0 : _a2.addItem({
      id: selectedVariant.id,
      sku: selectedVariant.sku,
      path: item.path,
      priceVariantIdentifier: "default",
      stock: selectedVariant.stock
    });
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "py-5"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex lg:flex-row flex-col items-center mt-10 mb-5"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col text-text w-6/12"
  }, /* @__PURE__ */ React.createElement("h1", {
    className: "font-extrabold text-5xl mb-3"
  }, item.name), /* @__PURE__ */ React.createElement(import_react_content_transformer2.ContentTransformer, {
    json: (_a = componentContent(item.summary.content, "RichTextContent")) == null ? void 0 : _a.json
  })), /* @__PURE__ */ React.createElement(import_react_image3.Image, __spreadProps(__spreadValues({}, item.defaultVariant.firstImage), {
    sizes: "400px",
    className: "w-full rounded-sm"
  })), /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col"
  }, /* @__PURE__ */ React.createElement(VariantSelector, {
    variants: item.variants,
    selectedVariant,
    onVariantChange
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "flex z-10 justify-between lg:w-5/12 w-8/12 mx-auto bg-white p-5 text-text rounded-xl"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", {
    className: "font-semibold text-sm"
  }, "Total price"), /* @__PURE__ */ React.createElement("p", {
    className: "font-bold text-lg"
  }, "$", selectedVariant.price)), /* @__PURE__ */ React.createElement("button", {
    onClick: () => buy(),
    className: "bg-background2 px-4 rounded-xl"
  }, "Add to Cart")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(ProductBody, {
    body: item.body,
    table: item.table
  }), /* @__PURE__ */ React.createElement("p", {
    className: "text-text mb-4 font-semibold"
  }, "Related do(u)nuts")), /* @__PURE__ */ React.createElement(RelatedProducts, {
    related: item.related
  }));
};

// app/http-cache-header-tagger.ts
init_react();
var import_parse_duration = __toESM(require("parse-duration"));
function HttpCacheHeaderTagger(maxAge, sharedMaxAge, tags) {
  if (process.env.HTTP_CACHE_SERVICE === "fastly") {
    return {
      headers: {
        "Cache-Control": `public, max-age=${(0, import_parse_duration.default)(maxAge, "s")}, s-maxage=${(0, import_parse_duration.default)(sharedMaxAge, "s")}, stale-while-revalidate=${(0, import_parse_duration.default)(maxAge, "s")}, stale-if-error=${(0, import_parse_duration.default)(sharedMaxAge, "s")}`,
        "Surrogate-Control": `max-age=${(0, import_parse_duration.default)(sharedMaxAge, "s")}, stale-while-revalidate=${(0, import_parse_duration.default)(sharedMaxAge, "s")}`,
        "Surrogate-Key": tags.join(",")
      }
    };
  }
  if (process.env.HTTP_CACHE_SERVICE === "varnish") {
    return {
      headers: {
        "Cache-Control": `public, max-age=${(0, import_parse_duration.default)(maxAge, "s")}, s-maxage=${(0, import_parse_duration.default)(sharedMaxAge, "s")}, stale-while-revalidate=${(0, import_parse_duration.default)(maxAge, "s")}`,
        "xkey": tags.join(",")
      }
    };
  }
  return {
    headers: {
      "Cache-Control": `public, max-age=${(0, import_parse_duration.default)(maxAge, "s")}, s-maxage=${(0, import_parse_duration.default)(sharedMaxAge, "s")}, stale-while-revalidate=${(0, import_parse_duration.default)(maxAge, "s")}`
    }
  };
}

// route:/home/aleksep/remix/donat/app/routes/shop/$product.tsx
var loader3 = async ({ params, request }) => {
  const url = new URL(request.url);
  const preview = url.searchParams.get("preview");
  const version = preview ? "draft" : "published";
  const path = "/shop/" + params.product;
  const data = await catalogueClient.request(normalizeDocumentNode(ProductDocument), { path, version });
  return (0, import_remix6.json)(__spreadProps(__spreadValues({}, data), { path }), HttpCacheHeaderTagger("30s", "1w", ["product", "product-" + params.product]));
};
var meta2 = ({ data }) => {
  var _a, _b, _c;
  let { product } = data;
  let description = (_b = componentContent((_a = product == null ? void 0 : product.summary) == null ? void 0 : _a.content, "RichTextContent")) == null ? void 0 : _b.plainText[0];
  let image = (_c = product == null ? void 0 : product.defaultVariant) == null ? void 0 : _c.firstImage.url;
  return {
    title: `${product == null ? void 0 : product.name} | Dounut`,
    description: `${description}`,
    "og:description": `${description}`,
    "og:image": `${image}`
  };
};
function headers() {
  return HttpCacheHeaderTagger("1m", "1w", ["product", "product-index"]).headers;
}
function Index() {
  let data = (0, import_remix6.useLoaderData)();
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", {
    className: "bg-background5 z-0 absolute left-0 right-0 rounded-full",
    style: {
      bottom: "10%",
      top: "20%",
      zIndex: "-1"
    }
  }), /* @__PURE__ */ React.createElement(Product, {
    product: data.product
  }));
}

// route:/home/aleksep/remix/donat/app/routes/checkout.tsx
var checkout_exports = {};
__export(checkout_exports, {
  default: () => Checkout
});
init_react();
var import_remix8 = __toESM(require_remix());

// app/components/payments/index.ts
init_react();

// app/components/payments/payments.tsx
init_react();
var import_react6 = require("react");

// app/components/payments/stripe.tsx
init_react();
var import_react5 = require("react");
var import_react_query3 = require("react-query");
var import_react_stripe_js2 = require("@stripe/react-stripe-js");

// app/service-api/stripe-payment-intent.generated.ts
init_react();
var StripePaymentIntentDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "mutation", "name": { "kind": "Name", "value": "StripePaymentIntent" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "checkoutModel" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "CheckoutModelInput" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "paymentProviders" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "stripe" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "createPaymentIntent" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "checkoutModel" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "checkoutModel" } } }] }] } }] } }] } }] };

// app/service-api/stripe-confirm-order.generated.ts
init_react();
var ConfirmStripeOrderDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "mutation", "name": { "kind": "Name", "value": "confirmStripeOrder" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "checkoutModel" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "CheckoutModelInput" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "paymentIntentId" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "paymentProviders" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "stripe" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "confirmOrder" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "checkoutModel" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "checkoutModel" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "paymentIntentId" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "paymentIntentId" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "success" } }, { "kind": "Field", "name": { "kind": "Name", "value": "orderId" } }] } }] } }] } }] } }] };

// app/components/stripe-loader.tsx
init_react();
var import_react_stripe_js = require("@stripe/react-stripe-js");

// app/hooks/useStripeConfig.ts
init_react();
var import_react_query2 = require("react-query");

// app/service-api/stripe-config.generated.ts
init_react();
var StripeConfigDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "StripeConfig" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "paymentProviders" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "stripe" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "config" } }] } }] } }] } }] };

// app/hooks/useStripeConfig.ts
function useStripeConfig() {
  const stripeConfig = (0, import_react_query2.useQuery)("stripeConfig", () => serviceAPIClient.request(StripeConfigDocument));
  return stripeConfig;
}

// app/hooks/useStripeLoader.ts
init_react();
var import_react4 = require("react");
var import_stripe_js = require("@stripe/stripe-js");
function useStripeLoader(stripeConfig) {
  const [stripeLoader, setStripeLoader] = (0, import_react4.useState)(null);
  (0, import_react4.useEffect)(() => {
    if ((stripeConfig == null ? void 0 : stripeConfig.data) && !stripeLoader) {
      setStripeLoader((0, import_stripe_js.loadStripe)(stripeConfig.data.paymentProviders.stripe.config.publishableKey));
    }
  }, [stripeConfig, stripeLoader]);
  return stripeLoader;
}

// app/components/stripe-loader.tsx
var StripeLoader = ({ loading, children }) => {
  const stripeConfig = useStripeConfig();
  const stripeLoader = useStripeLoader(stripeConfig);
  if (stripeConfig.isLoading || !stripeLoader) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, loading);
  }
  return /* @__PURE__ */ React.createElement(import_react_stripe_js.Elements, {
    stripe: stripeLoader
  }, children);
};

// app/components/payments/stripe.tsx
var import_remix7 = __toESM(require_remix());
var StripeForm = ({
  stripeClientSecret,
  checkoutModel,
  onSuccess,
  onError = (error) => console.log(error)
}) => {
  const stripe = (0, import_react_stripe_js2.useStripe)();
  const elements = (0, import_react_stripe_js2.useElements)();
  const [status, setStatus] = (0, import_react5.useState)("idle");
  (0, import_react5.useEffect)(() => {
    if (stripe) {
      stripe.elements({
        fonts: [{ cssSrc: "https://fonts.googleapis.com/css?family=Roboto" }]
      });
    }
  }, [stripe]);
  const handleSubmit = async (event) => {
    event.preventDefault();
    go();
    async function go() {
      setStatus("submitting");
      if (!stripe || !elements) {
        setTimeout(go, 100);
        console.log("checking in");
        return;
      }
      const { customer } = checkoutModel;
      const { error, paymentIntent } = await stripe.confirmCardPayment(stripeClientSecret, {
        payment_method: {
          card: elements.getElement(import_react_stripe_js2.CardElement),
          billing_details: {
            name: `${customer.firstName} ${customer.lastName}`
          }
        }
      });
      if (error) {
        onError(new Error(error.message));
        setStatus("idle");
        return;
      }
      if (paymentIntent.status !== "succeeded") {
        setStatus("idle");
        return;
      }
      const response = await serviceAPIClient.request(ConfirmStripeOrderDocument, {
        checkoutModel,
        paymentIntentId: paymentIntent.id
      });
      const { success, orderId } = response.paymentProviders.stripe.confirmOrder;
      if (success) {
        window.location.replace(`/confirmation/${orderId}`);
      } else {
        setStatus("idle");
        onError(new Error("Unknown"));
      }
    }
  };
  return /* @__PURE__ */ React.createElement(import_remix7.Form, {
    method: "post",
    onSubmit: handleSubmit
  }, /* @__PURE__ */ React.createElement(import_react_stripe_js2.CardElement, {
    options: {
      style: {
        base: {
          color: "#000",
          fontSize: "14px"
        }
      }
    },
    className: "mt-8 mb-5 border-2 border-text p-5"
  }), /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    disabled: status !== "idle",
    className: "w-full bg-text text-primary py-3 font-semibold mt-5"
  }, status === "idle" ? "Pay" : "Hang on..."));
};
var StripePayment = ({ checkoutModel, onSuccess }) => {
  var _a, _b, _c, _d;
  const stripePaymentIntent = (0, import_react_query3.useQuery)("paymentIntent", () => serviceAPIClient.request(StripePaymentIntentDocument, { checkoutModel }), { enabled: false });
  (0, import_react5.useEffect)(() => {
    stripePaymentIntent.refetch();
  }, []);
  const loading = /* @__PURE__ */ React.createElement("p", null, "Loading...");
  if (!stripePaymentIntent.data) {
    return loading;
  }
  const stripeClientSecret = (_d = (_c = (_b = (_a = stripePaymentIntent == null ? void 0 : stripePaymentIntent.data) == null ? void 0 : _a.paymentProviders) == null ? void 0 : _b.stripe) == null ? void 0 : _c.createPaymentIntent) == null ? void 0 : _d.client_secret;
  return /* @__PURE__ */ React.createElement(StripeLoader, {
    loading
  }, /* @__PURE__ */ React.createElement(StripeForm, {
    stripeClientSecret,
    checkoutModel,
    onSuccess
  }));
};
var Stripe = ({ checkoutModel, onSuccess }) => {
  return /* @__PURE__ */ React.createElement(StripePayment, {
    checkoutModel,
    onSuccess
  });
};

// app/components/payments/payments.tsx
var Payments = (props) => {
  const [payment, setPayment] = (0, import_react6.useState)("");
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("button", {
    onClick: () => setPayment("stripe"),
    className: "w-full bg-text text-primary py-3 font-semibold mt-5"
  }, "Stripe")), payment === "stripe" && /* @__PURE__ */ React.createElement(Stripe, __spreadValues({}, props)));
};

// route:/home/aleksep/remix/donat/app/routes/checkout.tsx
var import_react7 = require("react");
function Checkout() {
  const [state, setState] = (0, import_react7.useState)({
    firstName: "",
    lastName: "",
    email: "",
    street: "",
    city: "",
    postalCode: ""
  });
  const { firstName, lastName, email, street, city, postalCode } = state;
  const basket = useBasket();
  function getURL(path) {
    if (typeof window === "undefined")
      return "";
    return `${location == null ? void 0 : location.protocol}//${location == null ? void 0 : location.host}${path}`;
  }
  const checkoutModel = {
    basketModel: basket.basketModel,
    customer: {
      firstName,
      lastName,
      addresses: [
        { type: "billing", email },
        {
          type: "delivery",
          street,
          city,
          postalCode
        }
      ]
    },
    confirmationURL: getURL(`/confirmation/{crystallizeOrderId}`),
    checkoutURL: getURL(`/checkout`),
    termsURL: getURL(`/terms`)
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "p-10 mx-auto bg-background1 w-128 mt-20"
  }, /* @__PURE__ */ React.createElement("h1", {
    className: "text-text text-3xl font-bold mb-10 text-center"
  }, "Checkout"), /* @__PURE__ */ React.createElement("div", {
    className: "mx-auto"
  }, /* @__PURE__ */ React.createElement(import_remix8.Form, {
    method: "post",
    className: "flex flex-wrap gap-5"
  }, /* @__PURE__ */ React.createElement("input", {
    type: "text",
    name: "First Name",
    placeholder: "First name",
    className: "w-full",
    onChange: (e) => setState(__spreadProps(__spreadValues({}, state), { firstName: e.target.value }))
  }), /* @__PURE__ */ React.createElement("input", {
    type: "text",
    name: "Last Name",
    placeholder: "Last name",
    className: "w-full",
    onChange: (e) => setState(__spreadProps(__spreadValues({}, state), { lastName: e.target.value }))
  }), /* @__PURE__ */ React.createElement("input", {
    type: "text",
    name: "Email",
    placeholder: "Email",
    className: "w-full",
    onChange: (e) => setState(__spreadProps(__spreadValues({}, state), { email: e.target.value }))
  }), /* @__PURE__ */ React.createElement("input", {
    type: "text",
    name: "Street",
    placeholder: "Street",
    className: "w-full",
    onChange: (e) => setState(__spreadProps(__spreadValues({}, state), { street: e.target.value }))
  }), /* @__PURE__ */ React.createElement("input", {
    type: "text",
    name: "City",
    placeholder: "City",
    className: "w-full",
    onChange: (e) => setState(__spreadProps(__spreadValues({}, state), { city: e.target.value }))
  }), /* @__PURE__ */ React.createElement("input", {
    type: "text",
    name: "Postal Code",
    placeholder: "Postal Code",
    className: "w-full",
    onChange: (e) => setState(__spreadProps(__spreadValues({}, state), { postalCode: e.target.value }))
  }))), /* @__PURE__ */ React.createElement(Payments, {
    checkoutModel,
    onSuccess: () => console.log("success"),
    onError: () => {
    }
  }));
}

// route:/home/aleksep/remix/donat/app/routes/index.tsx
var routes_exports = {};
__export(routes_exports, {
  default: () => Index2,
  headers: () => headers2,
  loader: () => loader4,
  meta: () => meta3
});
init_react();
var import_remix11 = __toESM(require_remix());

// app/crystallize/queries/frontpage.generated.ts
init_react();
var FrontpageDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "Frontpage" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "path" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "version" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "VersionLabel" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "catalogue" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "path" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "path" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "language" }, "value": { "kind": "StringValue", "value": "en", "block": false } }, { "kind": "Argument", "name": { "kind": "Name", "value": "version" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "version" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "alias": { "kind": "Name", "value": "meta" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "meta", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "component" } }] } }, { "kind": "Field", "alias": { "kind": "Name", "value": "grid" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "grid", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "content" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "GridRelationsContent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "grids" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "rows" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "columns" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "layout" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "rowspan" } }, { "kind": "Field", "name": { "kind": "Name", "value": "colspan" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "item" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "path" } }, { "kind": "Field", "name": { "kind": "Name", "value": "topics" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Product" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "variants" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "images" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "image" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "price" } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, { "kind": "Field", "alias": { "kind": "Name", "value": "donuts" }, "name": { "kind": "Name", "value": "catalogue" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "path" }, "value": { "kind": "StringValue", "value": "/shop", "block": false } }, { "kind": "Argument", "name": { "kind": "Name", "value": "language" }, "value": { "kind": "StringValue", "value": "en", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "children" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "id" } }, { "kind": "Field", "name": { "kind": "Name", "value": "topics" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }] } }, { "kind": "Field", "alias": { "kind": "Name", "value": "bundle" }, "name": { "kind": "Name", "value": "component" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "id" }, "value": { "kind": "StringValue", "value": "bundle", "block": false } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "content" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "boolean" } }] } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Product" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "path" } }, { "kind": "Field", "name": { "kind": "Name", "value": "topics" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "defaultVariant" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "firstImage" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "image" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "price" } }] } }] } }] } }] } }] } }, ...ComponentFragmentDoc.definitions, ...ImageFragmentDoc.definitions, ...BooleanFragmentDoc.definitions] };

// route:/home/aleksep/remix/donat/app/routes/index.tsx
var import_react8 = __toESM(require("@crystallize/grid-renderer/react"));

// app/components/grid-item.tsx
init_react();
var import_react_image4 = require("@crystallize/react-image");
var import_remix9 = __toESM(require_remix());
var GridItem = ({ cell }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
  return cell.layout.colspan === 3 ? /* @__PURE__ */ React.createElement(import_remix9.Link, {
    to: (_a = cell == null ? void 0 : cell.item) == null ? void 0 : _a.path,
    prefetch: "intent"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex relative lg:flex-row flex-col"
  }, /* @__PURE__ */ React.createElement(import_react_image4.Image, __spreadProps(__spreadValues({}, (_c = (_b = cell.item) == null ? void 0 : _b.variants[0]) == null ? void 0 : _c.images[0]), {
    sizes: "(max-width: 700px) 300px, 500px",
    className: "lg:absolute lg:top-0 lg:bottom-0 lg:right-0  lg:w-8/12 overflow-hidden rounded-r-xl"
  })), /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col justify-evenly lg:w-128  px-5 bg-background1 h-80 p-5 rounded-xl w-full lg:items-start items-center"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "w-60 lg:text-left text-center"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "text-3xl font-bold"
  }, (_d = cell == null ? void 0 : cell.item) == null ? void 0 : _d.name), /* @__PURE__ */ React.createElement("p", {
    className: "mt-4"
  }, "$", (_f = (_e = cell.item) == null ? void 0 : _e.variants[0]) == null ? void 0 : _f.price)), /* @__PURE__ */ React.createElement("div", {
    className: "flex gap-1"
  }, (_h = (_g = cell.item) == null ? void 0 : _g.topics) == null ? void 0 : _h.map((topic) => /* @__PURE__ */ React.createElement("div", {
    className: "text-sm bg-grey px-2 py-1 rounded-2xl",
    key: topic.name
  }, topic.name)))))) : /* @__PURE__ */ React.createElement(import_remix9.Link, {
    to: cell.item.path,
    prefetch: "intent"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col bg-background1 px-5 py-7 rounded-xl lg:h-106 h-full"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-between items-start"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex gap-1"
  }, (_i = cell.item.topics) == null ? void 0 : _i.map((topic) => /* @__PURE__ */ React.createElement("div", {
    className: "text-sm bg-grey px-2 py-1 rounded-2xl",
    key: topic.name
  }, topic.name))), /* @__PURE__ */ React.createElement("p", {
    className: "self-end"
  }, "$", (_j = cell.item.variants[0]) == null ? void 0 : _j.price)), /* @__PURE__ */ React.createElement(import_react_image4.Image, __spreadProps(__spreadValues({}, (_k = cell.item.variants[0]) == null ? void 0 : _k.images[0]), {
    sizes: "(max-width: 700px) 200px, 300px",
    loading: "lazy"
  })), /* @__PURE__ */ React.createElement("h2", {
    className: "text-3xl font-bold text-center w-40 m-auto"
  }, cell.item.name)));
};

// app/components/products.tsx
init_react();
var import_react_image5 = require("@crystallize/react-image");
var import_remix10 = __toESM(require_remix());
var Products = ({ donuts }) => {
  var _a;
  return /* @__PURE__ */ React.createElement("div", {
    className: "mt-20"
  }, /* @__PURE__ */ React.createElement("p", {
    className: "text-lg font-semibold mb-10"
  }, "Our do(u)nuts"), /* @__PURE__ */ React.createElement("div", {
    className: "flex items-start flex-wrap lg:gap-1 gap-5"
  }, (_a = donuts == null ? void 0 : donuts.children) == null ? void 0 : _a.map((donut, index) => {
    var _a2, _b, _c, _d, _e, _f;
    return !((_b = componentContent((_a2 = donut == null ? void 0 : donut.bundle) == null ? void 0 : _a2.content, "BooleanContent")) == null ? void 0 : _b.value) && donut.bundle ? /* @__PURE__ */ React.createElement(import_remix10.Link, {
      to: componentContent(donut, "Product").path,
      prefetch: "intent",
      className: "flex flex-col bg-primary rounded-xl lg:h-106 p-5 lg:w-80",
      key: index
    }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", {
      className: "flex justify-between items-start"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "flex gap-1"
    }, (_c = donut == null ? void 0 : donut.topics) == null ? void 0 : _c.map((topic, index2) => /* @__PURE__ */ React.createElement("div", {
      className: "text-sm bg-grey px-2 py-1 rounded-2xl",
      key: index2
    }, topic.name))), /* @__PURE__ */ React.createElement("p", {
      className: "self-end"
    }, "$", (_d = componentContent(donut, "Product")) == null ? void 0 : _d.defaultVariant.price)), /* @__PURE__ */ React.createElement(import_react_image5.Image, __spreadProps(__spreadValues({}, (_e = componentContent(donut, "Product")) == null ? void 0 : _e.defaultVariant.firstImage), {
      sizes: "(max-width: 1024px) 100vw, 400px"
    })), /* @__PURE__ */ React.createElement("h2", {
      className: "text-3xl font-bold text-center m-auto w-40"
    }, (_f = componentContent(donut, "Product")) == null ? void 0 : _f.name))) : null;
  })));
};

// route:/home/aleksep/remix/donat/app/routes/index.tsx
var loader4 = async ({ request }) => {
  const url = new URL(request.url);
  const preview = url.searchParams.get("preview");
  const version = preview ? "draft" : "published";
  const path = "/frontpage";
  const data = await catalogueClient.request(normalizeDocumentNode(FrontpageDocument), { path, version });
  return (0, import_remix11.json)(__spreadProps(__spreadValues({}, data), { path }), HttpCacheHeaderTagger("30s", "1w", ["frontpage"]));
};
var meta3 = ({ data }) => {
  var _a, _b;
  let {
    catalogue: { meta: meta4 }
  } = data;
  let metaData = componentContent(meta4.content, "ContentChunkContent").chunks[0];
  return {
    title: `${componentContent(metaData[0].content, "SingleLineContent").text}`,
    description: `${componentContent(metaData[1].content, "RichTextContent").plainText[0]}`,
    "og:image": `${(_b = (_a = componentContent(metaData[2].content, "ImageContent")) == null ? void 0 : _a.images[0]) == null ? void 0 : _b.url}`
  };
};
function headers2() {
  return HttpCacheHeaderTagger("1m", "1w", ["index"]).headers;
}
function Index2() {
  let { catalogue, donuts } = (0, import_remix11.useLoaderData)();
  let { grid } = catalogue;
  const children = ({ cells }) => {
    return cells.map((cell, index) => /* @__PURE__ */ React.createElement("div", {
      style: {
        gridColumn: `span ${cell.layout.colspan}`,
        gridRow: `span ${cell.layout.rowspan}`
      },
      id: "grid-item",
      key: "cell" + index
    }, /* @__PURE__ */ React.createElement(GridItem, {
      cell
    })));
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "py-20"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "bg-background5 z-0 absolute left-0 right-0 bottom-0 rounded-tl-full rounded-tr-full",
    style: {
      top: "45%",
      zIndex: "-1"
    }
  }), /* @__PURE__ */ React.createElement(import_react8.default, {
    model: grid.content.grids[0],
    className: "gap-5"
  }, children), /* @__PURE__ */ React.createElement(Products, {
    donuts
  }));
}

// route:/home/aleksep/remix/donat/app/routes/cart.tsx
var cart_exports = {};
__export(cart_exports, {
  default: () => Cart
});
init_react();
var import_remix12 = __toESM(require_remix());
function Cart() {
  let basket = useBasket();
  if (!basket.cart.length) {
    return /* @__PURE__ */ React.createElement("div", {
      className: "py-20"
    }, /* @__PURE__ */ React.createElement("h1", {
      className: "text-4xl font-bold text-text"
    }, "The cart is empty."));
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: "py-20 text-text w-auth mx-auto"
  }, /* @__PURE__ */ React.createElement("h1", {
    className: "text-4xl font-bold  mb-10"
  }, "Your shopping cart (", basket.cart.length, ")"), /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-col gap-5 bg-background1 p-20"
  }, basket.cart.map((item, index) => {
    var _a;
    return /* @__PURE__ */ React.createElement("div", {
      key: index,
      className: "flex justify-between items-center"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "flex flex-col"
    }, /* @__PURE__ */ React.createElement("p", {
      className: "font-semibold text-xl"
    }, item.name, " \xD7 ", item.quantity), /* @__PURE__ */ React.createElement("div", {
      className: "flex gap-3"
    }, (_a = item.attributes) == null ? void 0 : _a.map((attr, index2) => /* @__PURE__ */ React.createElement("div", {
      className: "even:after:content-['\\00a0-'] even:before:content-['-\\00a0']",
      key: index2
    }, attr.value)))), /* @__PURE__ */ React.createElement("p", null, "$", item.price.gross * item.quantity));
  }), /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-between items-center border-t-2 border-text pt-4"
  }, /* @__PURE__ */ React.createElement("p", {
    className: "font-semibold text-xl"
  }, "Total"), /* @__PURE__ */ React.createElement("p", null, "$", basket.total.gross)), /* @__PURE__ */ React.createElement(import_remix12.Link, {
    to: "/checkout",
    className: "bg-text text-primary py-3 mt-10 rounded font-semibold text-center"
  }, "Go to Checkout")));
}

// server-assets-manifest:@remix-run/dev/assets-manifest
init_react();
var assets_manifest_default = { "version": "c6d6277a", "entry": { "module": "/build/entry.client-UPLLIYYB.js", "imports": ["/build/_shared/chunk-LXAEEAY6.js", "/build/_shared/chunk-I5ORBN7C.js"] }, "routes": { "root": { "id": "root", "parentId": void 0, "path": "", "index": void 0, "caseSensitive": void 0, "module": "/build/root-CIVIZKZG.js", "imports": ["/build/_shared/chunk-VDXORLXC.js", "/build/_shared/chunk-3DSF5OMX.js"], "hasAction": false, "hasLoader": true, "hasCatchBoundary": true, "hasErrorBoundary": true }, "routes/cart": { "id": "routes/cart", "parentId": "root", "path": "cart", "index": void 0, "caseSensitive": void 0, "module": "/build/routes/cart-FEXCJR7A.js", "imports": void 0, "hasAction": false, "hasLoader": false, "hasCatchBoundary": false, "hasErrorBoundary": false }, "routes/checkout": { "id": "routes/checkout", "parentId": "root", "path": "checkout", "index": void 0, "caseSensitive": void 0, "module": "/build/routes/checkout-FR26XJDG.js", "imports": ["/build/_shared/chunk-AXQIINXV.js"], "hasAction": false, "hasLoader": false, "hasCatchBoundary": false, "hasErrorBoundary": false }, "routes/confirmation/$orderId": { "id": "routes/confirmation/$orderId", "parentId": "root", "path": "confirmation/:orderId", "index": void 0, "caseSensitive": void 0, "module": "/build/routes/confirmation/$orderId-AONHCKVI.js", "imports": ["/build/_shared/chunk-AXQIINXV.js"], "hasAction": false, "hasLoader": true, "hasCatchBoundary": false, "hasErrorBoundary": false }, "routes/index": { "id": "routes/index", "parentId": "root", "path": void 0, "index": true, "caseSensitive": void 0, "module": "/build/routes/index-SJOVQ7BB.js", "imports": ["/build/_shared/chunk-BDTSCXDZ.js", "/build/_shared/chunk-AXQIINXV.js"], "hasAction": false, "hasLoader": true, "hasCatchBoundary": false, "hasErrorBoundary": false }, "routes/shop/$product": { "id": "routes/shop/$product", "parentId": "root", "path": "shop/:product", "index": void 0, "caseSensitive": void 0, "module": "/build/routes/shop/$product-V7I5IONR.js", "imports": ["/build/_shared/chunk-BDTSCXDZ.js", "/build/_shared/chunk-AXQIINXV.js"], "hasAction": false, "hasLoader": true, "hasCatchBoundary": false, "hasErrorBoundary": false } }, "url": "/build/manifest-C6D6277A.js" };

// server-entry-module:@remix-run/dev/server-build
var entry = { module: entry_server_exports };
var routes = {
  "root": {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/confirmation/$orderId": {
    id: "routes/confirmation/$orderId",
    parentId: "root",
    path: "confirmation/:orderId",
    index: void 0,
    caseSensitive: void 0,
    module: orderId_exports
  },
  "routes/shop/$product": {
    id: "routes/shop/$product",
    parentId: "root",
    path: "shop/:product",
    index: void 0,
    caseSensitive: void 0,
    module: product_exports
  },
  "routes/checkout": {
    id: "routes/checkout",
    parentId: "root",
    path: "checkout",
    index: void 0,
    caseSensitive: void 0,
    module: checkout_exports
  },
  "routes/index": {
    id: "routes/index",
    parentId: "root",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: routes_exports
  },
  "routes/cart": {
    id: "routes/cart",
    parentId: "root",
    path: "cart",
    index: void 0,
    caseSensitive: void 0,
    module: cart_exports
  }
};
module.exports = __toCommonJS(stdin_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assets,
  entry,
  routes
});
/**
 * @remix-run/node v1.2.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * @remix-run/react v1.2.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * @remix-run/server-runtime v1.2.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
