{
  "version": 3,
  "sources": ["../../../node_modules/@crystallize/react-image/src/index.tsx", "../../../node_modules/@crystallize/react-image/dist/index.js", "../../../app/crystallize/utils/componentContent.ts"],
  "sourcesContent": ["import React, { FC, HTMLAttributes, FunctionComponent } from 'react';\n\nexport interface CrystallizeImageVariant {\n  url: string;\n  width: number;\n  height?: number;\n  size?: number;\n}\n\ninterface RichTextContent {\n  html?: Array<string>;\n  json?: Array<any>;\n  plainText?: Array<string>;\n}\n\nexport interface Props extends HTMLAttributes<HTMLImageElement> {\n  children?: FunctionComponent<any>;\n  src?: string;\n  url?: string;\n  sizes?: string;\n  altText?: string;\n  alt?: string;\n  media?: string;\n  // The `html` content has higher priority than `plainText` because it has richer content.\n  // In case of getting both, the `html` is the one that will be displayed.\n  caption?: RichTextContent;\n  variants?: CrystallizeImageVariant[];\n  loading?: 'eager' | 'lazy';\n  _availableSizes?: number[];\n  _availableFormats?: string[];\n}\n\nfunction getVariantSrc(variant: CrystallizeImageVariant): string {\n  return `${variant.url} ${variant.width}w`;\n}\n\nexport const Image: FC<Props> = ({ children, ...restOfAllProps }) => {\n  const {\n    src,\n    url,\n    sizes,\n    variants,\n    altText,\n    alt: altPassed,\n    caption,\n    className,\n    media,\n    _availableSizes,\n    _availableFormats,\n    ...rest\n  } = restOfAllProps;\n\n  let vars = (variants || []).filter((v) => !!v);\n  const alt = typeof altPassed === 'string' ? altPassed : altText;\n\n  // Naive rendering POC\n  if (url && _availableSizes && _availableFormats) {\n    vars = [];\n    const urlWithoutFileExtension = url.replace(/\\.[^/]+$/, '');\n    const match = urlWithoutFileExtension.match(/(.+)(\\/)([^/]+)$/);\n    if (match) {\n      const [, base, , filename] = match;\n\n      _availableSizes.forEach((size) => {\n        _availableFormats.forEach((format) => {\n          vars.push({\n            url: `${base}/@${size}/${filename}.${format}`,\n            width: size,\n          });\n        });\n      });\n    }\n  }\n\n  const hasVariants = vars.length > 0;\n\n  // Get the biggest image from the variants\n  let biggestImage: CrystallizeImageVariant = vars[0];\n  if (hasVariants) {\n    biggestImage = vars.reduce(function (\n      acc: CrystallizeImageVariant,\n      v: CrystallizeImageVariant\n    ): CrystallizeImageVariant {\n      if (!acc.width || v.width > acc.width) {\n        return v;\n      }\n      return acc;\n    },\n    vars[0]);\n  }\n\n  // Determine srcSet\n  const std = vars.filter(\n    (v) => v.url && !v.url.endsWith('.webp') && !v.url.endsWith('.avif')\n  );\n  const webp = vars.filter((v) => v.url && v.url.endsWith('.webp'));\n  const avif = vars.filter((v) => v.url && v.url.endsWith('.avif'));\n  const srcSet = std.map(getVariantSrc).join(', ');\n  const srcSetWebp = webp.map(getVariantSrc).join(', ');\n  const srcSetAvif = avif.map(getVariantSrc).join(', ');\n\n  // Determine the original file extension\n  let originalFileExtension = 'jpeg';\n  if (std.length > 0) {\n    const match = std[0].url.match(/\\.(?<name>[^.]+)$/);\n    originalFileExtension = match?.groups?.name || 'jpeg';\n\n    // Provide correct mime type for jpg\n    if (originalFileExtension === 'jpg') {\n      originalFileExtension = 'jpeg';\n    }\n  }\n\n  const commonProps = {\n    // Ensure fallback src for older browsers\n    src: src || url || (hasVariants ? std[0].url : undefined),\n    alt,\n    caption,\n    width: biggestImage?.width,\n    height: biggestImage?.height,\n  };\n\n  let useWebP = srcSetWebp.length > 0;\n  let useAvif = srcSetAvif.length > 0;\n\n  /**\n   * Only output Avif format if it is smaller than\n   * webP. For the future: show only one of them when\n   * the browser support for Avif is good enough\n   */\n  if (useWebP && useAvif) {\n    const [firstWebp] = webp;\n    const [firstAvif] = avif;\n    if (firstWebp.size && firstAvif.size) {\n      useAvif = firstWebp.size > firstAvif.size;\n    }\n  }\n\n  if (children) {\n    return children({\n      srcSet,\n      srcSetWebp,\n      srcSetAvif,\n      useAvif,\n      useWebP,\n      className,\n      sizes,\n      media,\n      ...commonProps,\n      ...rest,\n      originalFileExtension,\n    });\n  }\n\n  const captionString = caption?.html?.[0] || caption?.plainText?.[0] || '';\n\n  return (\n    <figure className={className}>\n      <picture>\n        {useAvif && (\n          <source\n            srcSet={srcSetAvif}\n            type=\"image/avif\"\n            sizes={sizes}\n            media={media}\n          />\n        )}\n        {useWebP && (\n          <source\n            srcSet={srcSetWebp}\n            type=\"image/webp\"\n            sizes={sizes}\n            media={media}\n          />\n        )}\n        {srcSet.length > 0 && (\n          <source\n            srcSet={srcSet}\n            type={`image/${originalFileExtension}`}\n            sizes={sizes}\n            media={media}\n          />\n        )}\n        {/* eslint-disable-next-line jsx-a11y/alt-text */}\n        <img {...commonProps} {...rest} />\n      </picture>\n      {captionString && (\n        <figcaption dangerouslySetInnerHTML={{ __html: captionString }} />\n      )}\n    </figure>\n  );\n};\n", "\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./react-image.cjs.production.min.js')\n} else {\n  module.exports = require('./react-image.cjs.development.js')\n}\n", "// TODO: Add JSDoc comment\nexport const componentContent = <\n  T extends { __typename?: string },\n  V extends string & T[\"__typename\"]\n>(\n  o: T,\n  v: V\n): Extract<T, Record<\"__typename\", V>> => {\n  return o && o[\"__typename\"] === v\n    ? (o as Extract<T, Record<\"__typename\", V>>)\n    : null;\n};\n"],
  "mappings": "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",
  "names": []
}
